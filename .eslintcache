[{"C:\\Users\\Eli\\Desktop\\programmatical\\Cuneiform_and_ANE\\Cuneiform_processing\\UqNU\\uqnu\\src\\serviceWorker.js":"1","C:\\Users\\Eli\\Desktop\\programmatical\\Cuneiform_and_ANE\\Cuneiform_processing\\UqNU\\uqnu\\src\\features\\counter\\counterSlice.js":"2","C:\\Users\\Eli\\Desktop\\programmatical\\Cuneiform_and_ANE\\Cuneiform_processing\\UqNU\\uqnu\\src\\features\\editor\\editorSlice.js":"3","C:\\Users\\Eli\\Desktop\\programmatical\\Cuneiform_and_ANE\\Cuneiform_processing\\UqNU\\uqnu\\src\\features\\editor\\Editor.js":"4","C:\\Users\\Eli\\Desktop\\programmatical\\Cuneiform_and_ANE\\Cuneiform_processing\\UqNU\\uqnu\\src\\App.js":"5","C:\\Users\\Eli\\Desktop\\programmatical\\Cuneiform_and_ANE\\Cuneiform_processing\\UqNU\\uqnu\\src\\app\\store.js":"6","C:\\Users\\Eli\\Desktop\\programmatical\\Cuneiform_and_ANE\\Cuneiform_processing\\UqNU\\uqnu\\src\\features\\loader\\streamATF.js":"7","C:\\Users\\Eli\\Desktop\\programmatical\\Cuneiform_and_ANE\\Cuneiform_processing\\UqNU\\uqnu\\src\\features\\loader\\textEditor.js":"8","C:\\Users\\Eli\\Desktop\\programmatical\\Cuneiform_and_ANE\\Cuneiform_processing\\UqNU\\uqnu\\src\\features\\loader\\atfRender.js":"9","C:\\Users\\Eli\\Desktop\\programmatical\\Cuneiform_and_ANE\\Cuneiform_processing\\UqNU\\uqnu\\src\\features\\loader\\fileTabs.js":"10","C:\\Users\\Eli\\Desktop\\programmatical\\Cuneiform_and_ANE\\Cuneiform_processing\\UqNU\\uqnu\\src\\features\\loader\\virtualizedTable.js":"11","C:\\Users\\Eli\\Desktop\\programmatical\\Cuneiform_and_ANE\\Cuneiform_processing\\UqNU\\uqnu\\src\\features\\loader\\appBar.js":"12","C:\\Users\\Eli\\Desktop\\programmatical\\Cuneiform_and_ANE\\Cuneiform_processing\\UqNU\\uqnu\\src\\features\\loader\\uploader.js":"13","C:\\Users\\Eli\\Desktop\\programmatical\\Cuneiform_and_ANE\\Cuneiform_processing\\UqNU\\uqnu\\src\\index.js":"14","C:\\Users\\Eli\\Desktop\\programmatical\\Cuneiform_and_ANE\\Cuneiform_processing\\UqNU\\uqnu\\src\\features\\loader\\loaderSlice.js":"15","C:\\Users\\Eli\\Desktop\\programmatical\\Cuneiform_and_ANE\\Cuneiform_processing\\UqNU\\uqnu\\src\\features\\editor\\ChrComponent.js":"16","C:\\Users\\Eli\\Desktop\\programmatical\\Cuneiform_and_ANE\\Cuneiform_processing\\uqnu\\uqnu\\src\\serviceWorker.js":"17","C:\\Users\\Eli\\Desktop\\programmatical\\Cuneiform_and_ANE\\Cuneiform_processing\\uqnu\\uqnu\\src\\features\\loader\\loaderSlice.js":"18","C:\\Users\\Eli\\Desktop\\programmatical\\Cuneiform_and_ANE\\Cuneiform_processing\\uqnu\\uqnu\\src\\features\\loader\\uploader.js":"19","C:\\Users\\Eli\\Desktop\\programmatical\\Cuneiform_and_ANE\\Cuneiform_processing\\uqnu\\uqnu\\src\\features\\editor\\ChrComponent.js":"20","C:\\Users\\Eli\\Desktop\\programmatical\\Cuneiform_and_ANE\\Cuneiform_processing\\uqnu\\uqnu\\src\\features\\loader\\fileTabs.js":"21","C:\\Users\\Eli\\Desktop\\programmatical\\Cuneiform_and_ANE\\Cuneiform_processing\\uqnu\\uqnu\\src\\features\\loader\\textEditor.js":"22","C:\\Users\\Eli\\Desktop\\programmatical\\Cuneiform_and_ANE\\Cuneiform_processing\\uqnu\\uqnu\\src\\index.js":"23","C:\\Users\\Eli\\Desktop\\programmatical\\Cuneiform_and_ANE\\Cuneiform_processing\\uqnu\\uqnu\\src\\app\\store.js":"24","C:\\Users\\Eli\\Desktop\\programmatical\\Cuneiform_and_ANE\\Cuneiform_processing\\uqnu\\uqnu\\src\\features\\editor\\Editor.js":"25","C:\\Users\\Eli\\Desktop\\programmatical\\Cuneiform_and_ANE\\Cuneiform_processing\\uqnu\\uqnu\\src\\features\\loader\\atfRender.js":"26","C:\\Users\\Eli\\Desktop\\programmatical\\Cuneiform_and_ANE\\Cuneiform_processing\\uqnu\\uqnu\\src\\features\\loader\\virtualizedTable.js":"27","C:\\Users\\Eli\\Desktop\\programmatical\\Cuneiform_and_ANE\\Cuneiform_processing\\uqnu\\uqnu\\src\\features\\loader\\appBar.js":"28","C:\\Users\\Eli\\Desktop\\programmatical\\Cuneiform_and_ANE\\Cuneiform_processing\\uqnu\\uqnu\\src\\features\\loader\\streamATF.js":"29","C:\\Users\\Eli\\Desktop\\programmatical\\Cuneiform_and_ANE\\Cuneiform_processing\\uqnu\\uqnu\\src\\features\\editor\\editorPanel.js":"30","C:\\Users\\Eli\\Desktop\\programmatical\\Cuneiform_and_ANE\\Cuneiform_processing\\uqnu\\uqnu\\src\\features\\editor\\editorSlice.js":"31","C:\\Users\\Eli\\Desktop\\programmatical\\Cuneiform_and_ANE\\Cuneiform_processing\\uqnu\\uqnu\\src\\App.js":"32","C:\\users\\eli\\desktop\\programmatical\\cuneiform_and_ane\\cuneiform_processing\\uqnu\\uqnu\\src\\App.js":"33","C:\\users\\eli\\desktop\\programmatical\\cuneiform_and_ane\\cuneiform_processing\\uqnu\\uqnu\\src\\features\\editor\\editorSlice.js":"34","C:\\users\\eli\\desktop\\programmatical\\cuneiform_and_ane\\cuneiform_processing\\uqnu\\uqnu\\src\\services\\API\\index.js":"35","C:\\users\\eli\\desktop\\programmatical\\cuneiform_and_ane\\cuneiform_processing\\uqnu\\uqnu\\src\\serviceWorker.js":"36","C:\\users\\eli\\desktop\\programmatical\\cuneiform_and_ane\\cuneiform_processing\\uqnu\\uqnu\\src\\features\\editor\\ChrComponent.js":"37","C:\\users\\eli\\desktop\\programmatical\\cuneiform_and_ane\\cuneiform_processing\\uqnu\\uqnu\\src\\features\\loader\\atfRender.js":"38","C:\\users\\eli\\desktop\\programmatical\\cuneiform_and_ane\\cuneiform_processing\\uqnu\\uqnu\\src\\features\\editor\\editorPanel.js":"39","C:\\users\\eli\\desktop\\programmatical\\cuneiform_and_ane\\cuneiform_processing\\uqnu\\uqnu\\src\\app\\store.js":"40","C:\\users\\eli\\desktop\\programmatical\\cuneiform_and_ane\\cuneiform_processing\\uqnu\\uqnu\\src\\features\\loader\\uploader.js":"41","C:\\users\\eli\\desktop\\programmatical\\cuneiform_and_ane\\cuneiform_processing\\uqnu\\uqnu\\src\\features\\loader\\streamATF.js":"42","C:\\users\\eli\\desktop\\programmatical\\cuneiform_and_ane\\cuneiform_processing\\uqnu\\uqnu\\src\\features\\loader\\virtualizedTable.js":"43","C:\\users\\eli\\desktop\\programmatical\\cuneiform_and_ane\\cuneiform_processing\\uqnu\\uqnu\\src\\services\\axios\\index.js":"44","C:\\users\\eli\\desktop\\programmatical\\cuneiform_and_ane\\cuneiform_processing\\uqnu\\uqnu\\src\\features\\loader\\loaderSlice.js":"45","C:\\users\\eli\\desktop\\programmatical\\cuneiform_and_ane\\cuneiform_processing\\uqnu\\uqnu\\src\\features\\loader\\fileTabs.js":"46","C:\\users\\eli\\desktop\\programmatical\\cuneiform_and_ane\\cuneiform_processing\\uqnu\\uqnu\\src\\features\\loader\\textEditor.js":"47","C:\\users\\eli\\desktop\\programmatical\\cuneiform_and_ane\\cuneiform_processing\\uqnu\\uqnu\\src\\index.js":"48","C:\\users\\eli\\desktop\\programmatical\\cuneiform_and_ane\\cuneiform_processing\\uqnu\\uqnu\\src\\features\\loader\\appBar.js":"49","C:\\users\\eli\\desktop\\programmatical\\cuneiform_and_ane\\cuneiform_processing\\uqnu\\uqnu\\src\\features\\editor\\Editor.js":"50"},{"size":5141,"mtime":1607079498037,"results":"51","hashOfConfig":"52"},{"size":1682,"mtime":1607096184908,"results":"53","hashOfConfig":"52"},{"size":2616,"mtime":1607864178694,"results":"54","hashOfConfig":"52"},{"size":9497,"mtime":1612031031680,"results":"55","hashOfConfig":"52"},{"size":1673,"mtime":1607448088633,"results":"56","hashOfConfig":"52"},{"size":388,"mtime":1607637621246,"results":"57","hashOfConfig":"52"},{"size":4597,"mtime":1611752233251,"results":"58","hashOfConfig":"52"},{"size":7373,"mtime":1611315741390,"results":"59","hashOfConfig":"52"},{"size":910,"mtime":1611052217471,"results":"60","hashOfConfig":"52"},{"size":1879,"mtime":1586917604731,"results":"61","hashOfConfig":"52"},{"size":9657,"mtime":1611923736551,"results":"62","hashOfConfig":"52"},{"size":4853,"mtime":1587600978661,"results":"63","hashOfConfig":"52"},{"size":18500,"mtime":1612020483808,"results":"64","hashOfConfig":"52"},{"size":761,"mtime":1609946069968,"results":"65","hashOfConfig":"52"},{"size":3028,"mtime":1612021116761,"results":"66","hashOfConfig":"52"},{"size":4672,"mtime":1612039899782,"results":"67","hashOfConfig":"52"},{"size":5141,"mtime":1607079498037,"results":"68","hashOfConfig":"69"},{"size":3028,"mtime":1612021116761,"results":"70","hashOfConfig":"71"},{"size":20796,"mtime":1617645266507,"results":"72","hashOfConfig":"71"},{"size":9473,"mtime":1620336648698,"results":"73","hashOfConfig":"71"},{"size":1879,"mtime":1586917604731,"results":"74","hashOfConfig":"71"},{"size":8253,"mtime":1614284283956,"results":"75","hashOfConfig":"71"},{"size":761,"mtime":1609946069968,"results":"76","hashOfConfig":"69"},{"size":388,"mtime":1607637621246,"results":"77","hashOfConfig":"69"},{"size":11265,"mtime":1618147960863,"results":"78","hashOfConfig":"69"},{"size":910,"mtime":1611052217471,"results":"79","hashOfConfig":"71"},{"size":9657,"mtime":1611923736551,"results":"80","hashOfConfig":"69"},{"size":4857,"mtime":1613670895812,"results":"81","hashOfConfig":"71"},{"size":4549,"mtime":1614288292567,"results":"82","hashOfConfig":"71"},{"size":11885,"mtime":1620402354481,"results":"83","hashOfConfig":"71"},{"size":3459,"mtime":1618174894636,"results":"84","hashOfConfig":"71"},{"size":1673,"mtime":1607448088633,"results":"85","hashOfConfig":"71"},{"size":2527,"mtime":1628001042761,"results":"86","hashOfConfig":"87"},{"size":3593,"mtime":1628105637099,"results":"88","hashOfConfig":"87"},{"size":309,"mtime":1627997446044,"results":"89","hashOfConfig":"87"},{"size":5141,"mtime":1607079498037,"results":"90","hashOfConfig":"87"},{"size":9726,"mtime":1628110903415,"results":"91","hashOfConfig":"87"},{"size":910,"mtime":1611052217471,"results":"92","hashOfConfig":"87"},{"size":12969,"mtime":1628107865316,"results":"93","hashOfConfig":"87"},{"size":388,"mtime":1607637621246,"results":"94","hashOfConfig":"87"},{"size":20694,"mtime":1628103779331,"results":"95","hashOfConfig":"87"},{"size":4549,"mtime":1614288292567,"results":"96","hashOfConfig":"87"},{"size":9657,"mtime":1611923736551,"results":"97","hashOfConfig":"87"},{"size":197,"mtime":1627997446047,"results":"98","hashOfConfig":"87"},{"size":3028,"mtime":1612021116761,"results":"99","hashOfConfig":"87"},{"size":1879,"mtime":1586917604731,"results":"100","hashOfConfig":"87"},{"size":8253,"mtime":1614284283956,"results":"101","hashOfConfig":"87"},{"size":761,"mtime":1609946069968,"results":"102","hashOfConfig":"87"},{"size":4857,"mtime":1613670895812,"results":"103","hashOfConfig":"87"},{"size":11628,"mtime":1628105697481,"results":"104","hashOfConfig":"87"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"107"},"10l6qh8",{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"113","messages":"114","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"115","messages":"116","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117","usedDeprecatedRules":"118"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"121"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"127","messages":"128","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"129","messages":"130","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"131","usedDeprecatedRules":"132"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"121"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"143","messages":"144","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"147"},"17teegw",{"filePath":"148","messages":"149","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"150","usedDeprecatedRules":"151"},"1kv5ub8",{"filePath":"152","messages":"153","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"154","usedDeprecatedRules":"155"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"158","messages":"159","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"131","usedDeprecatedRules":"151"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"169","messages":"170","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"171","messages":"172","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"173","messages":"174","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"175","messages":"176","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"177","usedDeprecatedRules":"155"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"180","messages":"181","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"182","messages":"183","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117","usedDeprecatedRules":"155"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"186","usedDeprecatedRules":"187"},"1p7q74",{"filePath":"188","messages":"189","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"190"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"193","usedDeprecatedRules":"194"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"197"},{"filePath":"198","messages":"199","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"200","messages":"201","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"202","usedDeprecatedRules":"197"},{"filePath":"203","messages":"204","errorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"205"},{"filePath":"206","messages":"207","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"190"},{"filePath":"208","messages":"209","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"210","usedDeprecatedRules":"187"},{"filePath":"211","messages":"212","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"177","usedDeprecatedRules":"190"},{"filePath":"213","messages":"214","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"215","usedDeprecatedRules":"187"},{"filePath":"216","messages":"217","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"218","messages":"219","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"150","usedDeprecatedRules":"190"},{"filePath":"220","messages":"221","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"131","usedDeprecatedRules":"222"},{"filePath":"223","messages":"224","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"225"},{"filePath":"226","messages":"227","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"190"},{"filePath":"228","messages":"229","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"230","usedDeprecatedRules":"187"},{"filePath":"231","messages":"232","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"233","usedDeprecatedRules":"190"},"C:\\Users\\Eli\\Desktop\\programmatical\\Cuneiform_and_ANE\\Cuneiform_processing\\UqNU\\uqnu\\src\\serviceWorker.js",[],["234","235"],"C:\\Users\\Eli\\Desktop\\programmatical\\Cuneiform_and_ANE\\Cuneiform_processing\\UqNU\\uqnu\\src\\features\\counter\\counterSlice.js",[],["236","237"],"C:\\Users\\Eli\\Desktop\\programmatical\\Cuneiform_and_ANE\\Cuneiform_processing\\UqNU\\uqnu\\src\\features\\editor\\editorSlice.js",[],"C:\\Users\\Eli\\Desktop\\programmatical\\Cuneiform_and_ANE\\Cuneiform_processing\\UqNU\\uqnu\\src\\features\\editor\\Editor.js",["238","239","240","241","242","243","244","245","246","247"],"C:\\Users\\Eli\\Desktop\\programmatical\\Cuneiform_and_ANE\\Cuneiform_processing\\UqNU\\uqnu\\src\\App.js",["248","249"],"import React from 'react';\r\nimport logo from './logo.svg';\r\n//import { Counter } from './features/counter/Counter';\r\n\r\nimport { Editor } from './features/editor/Editor';\r\n\r\nimport { ATFUploader } from './features/loader/uploader';\r\n\r\nimport './App.css';\r\n\r\nfunction App() {\r\n    \r\n    return (\r\n    <div className=\"App\">\r\n    <ATFUploader/>\r\n    </div>\r\n    )\r\n/*   return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n        <Editor />\r\n        <p>\r\n          Edit <code>src/App.js</code> and save to reload.\r\n        </p>\r\n        <span>\r\n          <span>Learn </span>\r\n          <a\r\n            className=\"App-link\"\r\n            href=\"https://reactjs.org/\"\r\n            target=\"_blank\"\r\n            rel=\"noopener noreferrer\"\r\n          >\r\n            React\r\n          </a>\r\n          <span>, </span>\r\n          <a\r\n            className=\"App-link\"\r\n            href=\"https://redux.js.org/\"\r\n            target=\"_blank\"\r\n            rel=\"noopener noreferrer\"\r\n          >\r\n            Redux\r\n          </a>\r\n          <span>, </span>\r\n          <a\r\n            className=\"App-link\"\r\n            href=\"https://redux-toolkit.js.org/\"\r\n            target=\"_blank\"\r\n            rel=\"noopener noreferrer\"\r\n          >\r\n            Redux Toolkit\r\n          </a>\r\n          ,<span> and </span>\r\n          <a\r\n            className=\"App-link\"\r\n            href=\"https://react-redux.js.org/\"\r\n            target=\"_blank\"\r\n            rel=\"noopener noreferrer\"\r\n          >\r\n            React Redux\r\n          </a>\r\n        </span>\r\n      </header>\r\n    </div>\r\n  ); */\r\n}\r\n\r\nexport default App;\r\n",["250","251"],"C:\\Users\\Eli\\Desktop\\programmatical\\Cuneiform_and_ANE\\Cuneiform_processing\\UqNU\\uqnu\\src\\app\\store.js",[],["252","253"],"C:\\Users\\Eli\\Desktop\\programmatical\\Cuneiform_and_ANE\\Cuneiform_processing\\UqNU\\uqnu\\src\\features\\loader\\streamATF.js",["254","255","256","257","258","259"],"import * as C from 'jtf-lib';\r\n\r\n//var DelimiterStream = require('delimiter-stream');\r\nvar StringDecoder = require('string_decoder').StringDecoder;\r\nvar decoder = new StringDecoder('utf8');\r\n//var toStream = require('blob-to-stream');\r\nconst {ReadableWebToNodeStream} = require('readable-web-to-node-stream');\r\n\r\n/* var es = require('event-stream');\r\nvar inspect = require('util').inspect;\r\n */\r\nvar _ = require('highland');\r\n\r\nconst chunk2TableData = (\r\n\tchunk, chunkDecoded, PNumber, linesCount, beginsAtLine, \r\n\tchunkStartsAt, chunkEndsAt, options) => {\r\n\t//\r\n\treturn {\r\n\t\t\t//string: chunkDecoded,\r\n\t\t\tPNumber: PNumber,\r\n\t\t\tchunkStartsAt: chunkStartsAt,\r\n\t\t\tchunkEndsAt: chunkStartsAt+chunk.length,\r\n\t\t\tbeginsAtLine: beginsAtLine,\r\n\t\t\tendsAtLine: beginsAtLine+linesCount,\r\n\t\t\t...options\r\n\t\t};\r\n};\r\n\r\nconst mapTextsInBuffer = function(arrBuff, offset, push, size) {\r\n\t//\r\n\tlet Uint8Arr = new Uint8Array(arrBuff);\r\n\tUint8Arr.forEach(function(x, i) {\r\n\t\tlet delim = [];\r\n\t\tif (offset+i===0) { //first line\r\n\t\t\tif (i+1 < Uint8Arr.length){\r\n\t\t\t\tdelim = Array.from(Uint8Arr.slice(i, i+2))\r\n\t\t\t}\r\n\t\t} else if (x===10) { //every new line\r\n\t\t\tif (i+2 < Uint8Arr.length){\r\n\t\t\t\ti++\r\n\t\t\t\tdelim = Array.from(Uint8Arr.slice(i, i+2))\r\n\t\t\t};\r\n\t\t};\r\n\t\tif (delim[0]===38 && delim[1]===80){ //i.e. '&P'\r\n\t\t\tpush(null, offset+i);\r\n\t\t};\r\n\t\tif (offset+i+1===size){ \r\n\t\t\tpush(null, _.nil)\r\n\t\t};\r\n\t});\r\n};\r\n\r\nconst file2textsMap = function(file) {\r\n\t//\r\n\treturn _(function (push, next) {\r\n\t\tlet size = file.size;\r\n\t\t//let delimiter = Buffer.from('\\n&P');\r\n\t\tlet last = false;\r\n\t\tlet fSlice = null;\r\n\t\tfor (let begin = 0; begin < size; begin+=100000){\r\n\t\t\tif (begin+100000 >= size ){\r\n\t\t\t\tlast = true\r\n\t\t\t\tfSlice = file.slice(begin, size)\r\n\t\t\t} else {\r\n\t\t\t\tfSlice = file.slice(begin, begin+100002);\r\n\t\t\t}\r\n\t\t\tfSlice.arrayBuffer()\r\n\t\t\t.then(\r\n\t\t\t\t(arrBuff) => {\r\n\t\t\t\t\tmapTextsInBuffer(arrBuff, begin, push, size);\r\n\t\t\t\t}\r\n\t\t\t);\r\n\t\t\tif (last){ break };\r\n\t\t};\r\n\t});\r\n};\r\n\r\nexport const stream = (file, callback, callbackEnd) => {\r\n\t//\r\n\t//var input = toStream(file, { highWaterMark: 1024 }); //!!! This causes memory crash with large files\r\n\tconst input = new ReadableWebToNodeStream(file.stream());\r\n\tvar beginsAtLine = 1;\r\n\tvar chunksCounter = 0;\r\n\tvar fileTextsMap = [];\r\n\tvar delimiter = '\\n&P';\r\n\tvar splitter = file2textsMap(file); // that's a nodeJS stream\r\n\t\r\n\tsplitter.on('data', function(chunk) {\r\n\t\tsplitter.pause();\r\n\t\tfileTextsMap.push(chunk);\r\n\t\tchunksCounter++\r\n\t\tif (chunksCounter%1000===0){ \r\n\t\t\tconsole.log('so far:', chunksCounter)\r\n\t\t}\r\n\t\tsplitter.resume();\r\n\t});\r\n\t\r\n\tsplitter.on('end', () => {\r\n\t\tfileTextsMap.push(file.size);\r\n\t\tconsole.log('total:', chunksCounter);\r\n\t\tlet ATFMap = {\r\n\t\t\tfile: file,\r\n\t\t\tfileTextsMap: fileTextsMap,\r\n\t\t\ttextsCount: chunksCounter,\r\n\t\t};\r\n\t\tcallbackEnd( ATFActions2Map( ATFMap ) );\r\n\t});\r\n};\r\n\r\nexport const ATFActions2Map = function( map ){\r\n\t//\r\n\tlet { file, fileTextsMap, textsCount } = map;\r\n\tconsole.log('making ATF functions for file', file);\r\n\tconst getCoordinates = function(i){\r\n\t\t//\r\n\t\treturn [fileTextsMap[i], fileTextsMap[i+1]]\r\n\t};\r\n\t\r\n\tconst getTextObject = function(string, index){\r\n\t\t//\r\n\t\tlet getJTF = C.ATF2JTF.bind(this, string, map.file.name);\r\n\t\tconsole.log('! atf2jtf at index', index)\r\n\t\treturn {\r\n\t\t\tPNumber: string.slice(1, 8),\r\n\t\t\tstring: string,\r\n\t\t\t//map: map,\r\n\t\t\tindex: index,\r\n\t\t\tJTFResponse: getJTF(),\r\n\t\t};\r\n\t};\r\n\t\r\n\tconst ATFAtIndex = (index, callback=null) => {\r\n\t\t//\r\n\t\tconsole.log( 'requesting ATF at index', index )\r\n\t\tif (index<=textsCount){\r\n\t\t\tlet [start, end] = getCoordinates(index);\r\n\t\t\treturn file.slice(start, end).text().then(\r\n\t\t\t\t(string) => {\r\n\t\t\t\t\tlet atfObj = getTextObject(string, index)\r\n\t\t\t\t\tif (callback){\r\n\t\t\t\t\t\tcallback(atfObj)\r\n\t\t\t\t\t};\r\n\t\t\t\t\treturn atfObj;\r\n\t\t\t\t}\r\n\t\t\t);\r\n\t\t} else {\r\n\t\t\tif (callback){\r\n\t\t\t\tcallback(null);\r\n\t\t\t};\r\n\t\t\treturn null;\r\n\t\t};\r\n\t};\r\n\t\r\n\tconst arrToFile = (arr) => {\r\n\t\t//\r\n\t\tlet { name, webkitRelativePath, type } = file;\r\n\t\treturn new File(arr, name, {type: type,});\r\n\t};\r\n\t\r\n\tconst rewriteAtIndex = (index, string, callback, callbackEnd) => {\r\n\t\t// \r\n\t\tif (index<=textsCount){\r\n\t\t\tlet [start, end] = getCoordinates(index);\r\n\t\t\tlet first = file.slice(0, start);\r\n\t\t\tlet last = file.slice(end, file.size);\r\n\t\t\tPromise.resolve(first).then(first => {\r\n\t\t\t\tPromise.resolve(last).then(last => {\r\n\t\t\t\t\tlet newFile = arrToFile([first, string, last]);\r\n\t\t\t\t\tstream(newFile, callback, callbackEnd);\r\n\t\t\t\t})\r\n\t\t\t});\r\n\t\t} else {\r\n\t\t\treturn null;\r\n\t\t};\r\n\t};\r\n\t\r\n\tlet actions = { \r\n\t\t\tATFAtIndex: ATFAtIndex, \r\n\t\t\trewriteAtIndex: rewriteAtIndex,\r\n\t};\r\n\treturn {...map, actions: actions}\r\n};\r\n\r\n","C:\\Users\\Eli\\Desktop\\programmatical\\Cuneiform_and_ANE\\Cuneiform_processing\\UqNU\\uqnu\\src\\features\\loader\\textEditor.js",["260","261","262","263","264","265","266","267","268","269","270","271","272","273","274"],"C:\\Users\\Eli\\Desktop\\programmatical\\Cuneiform_and_ANE\\Cuneiform_processing\\UqNU\\uqnu\\src\\features\\loader\\atfRender.js",["275","276"],"C:\\Users\\Eli\\Desktop\\programmatical\\Cuneiform_and_ANE\\Cuneiform_processing\\UqNU\\uqnu\\src\\features\\loader\\fileTabs.js",["277","278"],"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {Tab, Tabs, Typography, Box, AppBar, Zoom} from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nfunction TabPanel(props) {\r\n\tconst { children, value, index, ...other } = props;\r\n\r\n\treturn (\r\n\t\t<Typography\r\n\t\t\tcomponent=\"div\"\r\n\t\t\trole=\"tabpanel\"\r\n\t\t\thidden={value !== index}\r\n\t\t\tid={`scrollable-auto-tabpanel-${index}`}\r\n\t\t\taria-labelledby={`scrollable-auto-tab-${index}`}\r\n\t\t\t{...other}\r\n\t\t>\r\n\t\t\t{value === index && <Box p={3}>{children}</Box>}\r\n\t\t</Typography>\r\n\t);\r\n}\r\n\r\nTabPanel.propTypes = {\r\n\tchildren: PropTypes.node,\r\n\tindex: PropTypes.any.isRequired,\r\n\tvalue: PropTypes.any.isRequired,\r\n};\r\n\r\nfunction a11yProps(index) {\r\n\treturn {\r\n\t\tid: `scrollable-auto-tab-${index}`,\r\n\t\t'aria-controls': `scrollable-auto-tabpanel-${index}`,\r\n\t};\r\n}\r\n\r\nexport default class ScrollableTabsButtonAuto extends React.Component {\r\n\t// React component for uploading and checking ATF files.\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.tableRef = React.createRef()\r\n\t\tthis.state = {\r\n\t\t\tvalue: 0,\r\n\t\t};\r\n\t};\r\n\t\r\n\tmakeTabs = (tabsArr) => {\r\n\t\treturn tabsArr.map( (tab, i) => {\r\n\t\t\treturn this.makeTab(tab.label, i)\r\n\t\t});\r\n\t};\r\n\t\r\n\tmakeTab = (label, index) => {\r\n\t\treturn (\r\n\t\t\t<Tab\r\n\t\t\t\tkey={index}\r\n\t\t\t\tlabel={label}\r\n\t\t\t\t{...a11yProps(index)}\r\n\t\t\t/>)\r\n\t};\r\n\t\r\n\thandleChange = (event, newValue) => {\r\n\t\tthis.setState({value: newValue});\r\n\t\tthis.props.handleChangeCallback(newValue);\r\n\t};\r\n\t\r\n\trender(){\r\n\t\tlet { tabs } = this.props;\r\n\t\treturn (\r\n\t\t<AppBar position=\"static\" color=\"default\">\r\n\t\t\t<Tabs\r\n\t\t\t\tkey={0}\r\n\t\t\t\tvalue={this.state.value}\r\n\t\t\t\tindicatorColor=\"primary\"\r\n\t\t\t\ttextColor=\"primary\"\r\n\t\t\t\tvariant=\"scrollable\"\r\n\t\t\t\tscrollButtons=\"auto\"\r\n\t\t\t\taria-label=\"sources\"\r\n\t\t\t\tonChange={this.handleChange}\r\n\t\t\t>\r\n\t\t\t\t{this.makeTabs(tabs)}\r\n\t\t\t</Tabs>\r\n\t\t</AppBar>\r\n\t\t)\r\n\t};\r\n};\r\n",["279","280"],"C:\\Users\\Eli\\Desktop\\programmatical\\Cuneiform_and_ANE\\Cuneiform_processing\\UqNU\\uqnu\\src\\features\\loader\\virtualizedTable.js",["281","282","283","284","285"],"C:\\Users\\Eli\\Desktop\\programmatical\\Cuneiform_and_ANE\\Cuneiform_processing\\UqNU\\uqnu\\src\\features\\loader\\appBar.js",[],"C:\\Users\\Eli\\Desktop\\programmatical\\Cuneiform_and_ANE\\Cuneiform_processing\\UqNU\\uqnu\\src\\features\\loader\\uploader.js",["286","287","288","289","290","291","292","293","294","295","296","297","298","299"],"C:\\Users\\Eli\\Desktop\\programmatical\\Cuneiform_and_ANE\\Cuneiform_processing\\UqNU\\uqnu\\src\\index.js",[],"C:\\Users\\Eli\\Desktop\\programmatical\\Cuneiform_and_ANE\\Cuneiform_processing\\UqNU\\uqnu\\src\\features\\loader\\loaderSlice.js",["300"],"C:\\Users\\Eli\\Desktop\\programmatical\\Cuneiform_and_ANE\\Cuneiform_processing\\UqNU\\uqnu\\src\\features\\editor\\ChrComponent.js",["301","302"],"C:\\Users\\Eli\\Desktop\\programmatical\\Cuneiform_and_ANE\\Cuneiform_processing\\uqnu\\uqnu\\src\\serviceWorker.js",[],["303","304"],"C:\\Users\\Eli\\Desktop\\programmatical\\Cuneiform_and_ANE\\Cuneiform_processing\\uqnu\\uqnu\\src\\features\\loader\\loaderSlice.js",["305"],"import { createSlice } from '@reduxjs/toolkit';\r\n\r\nfunction logReducerData( message, state, action ){\r\n  //\r\n  console.log(message, JSON.parse(JSON.stringify(state)), action, action.payload)\r\n  console.log(state.JTF)\r\n};\r\n\r\nexport const loaderSlice = createSlice({\r\n  name: 'loader',\r\n  initialState: {\r\n    fileDataMap: {},\r\n    activeFileTab: 0,\r\n    activeTextRow: 0,\r\n    edit: null,\r\n    dropzoneDrawerOpen: false,\r\n    loadJTF: false,\r\n  },\r\n  reducers: {\r\n    // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\r\n    // doesn't actually mutate the state because it uses the Immer library,\r\n    // which detects changes to a \"draft state\" and produces a brand new\r\n    // immutable state based off those changes.\r\n    // \r\n    updateDataMap: (state, action) => {\r\n    // onFileStreamEnd\r\n    // DO NOT STORE FILES IN redux\r\n    // https://stackoverflow.com/questions/61705940/best-way-to-store-file-objects-in-react-redux-store-files-upload-from-dropzone\r\n        let { key, data } = action.payload;\r\n        if ( data ){\r\n            state.fileDataMap[key] = data;\r\n        } else if (state.fileDataMap[key]) {\r\n            delete state.fileDataMap[key];\r\n        };\r\n    },\r\n    \r\n    loadJTFStart: (state, action) => {\r\n    // Mark JTF loading to editor as completed.\r\n        state.loadJTF = true;\r\n    },\r\n    loadJTFCompleted: (state, action) => {\r\n    // Mark JTF loading to editor as completed.\r\n        state.loadJTF = false;\r\n    },\r\n    openDropzoneDrawer: (state, action) => {\r\n     // onAddButtonClick\r\n    },\r\n    closeDropzoneDrawer: (state, action) => {\r\n    // closeDropzoneDrawer\r\n    },\r\n    handleDropzoneChangeStatus: (state, action) => {\r\n    // handleDropzoneChangeStatus\r\n    },\r\n    switchFileTab: (state, action) => {\r\n    // onFileTabSwitch\r\n        let { tab } = action.payload;\r\n        if (tab!==state.activeFileTab){\r\n            state.activeFileTab = tab;\r\n            state.activeTextRow = 0;\r\n            state.loadJTF = true;\r\n        };\r\n    },\r\n    selectTextRow: (state, action) => {\r\n    // onTextRowSelect\r\n        let { row } = action.payload;\r\n        if (row!==state.activeTextRow){\r\n            state.activeTextRow = row;\r\n            state.loadJTF = true;\r\n        };\r\n    },\r\n    editText: (state, action) => {\r\n    // onTextEdit\r\n    },\r\n    saveEdit2File: (state, action) => {\r\n    // saveEdit2File\r\n    },\r\n    download: (state, action) => {\r\n    // download\r\n    },\r\n    downloadFile: (state, action) => {\r\n    // downloadFile\r\n    },\r\n    downloadAllFiles: (state, action) => {\r\n    // downloadAllFiles\r\n    },\r\n    downloadCurrent: (state, action) => {\r\n    // downloadCurrent\r\n    },\r\n  },\r\n});\r\n\r\nexport const { \r\n  updateDataMap,\r\n  loadJTFStart,\r\n  loadJTFCompleted,\r\n  openDropzoneDrawer,\r\n  closeDropzoneDrawer,\r\n  handleDropzoneChangeStatus,\r\n  switchFileTab,\r\n  selectTextRow,\r\n  editText,\r\n  saveEdit2File,\r\n  download,\r\n  downloadFile,\r\n  downloadAllFiles,\r\n  downloadCurrent,\r\n  } = loaderSlice.actions;\r\n\r\nexport default loaderSlice.reducer;",["306","307"],"C:\\Users\\Eli\\Desktop\\programmatical\\Cuneiform_and_ANE\\Cuneiform_processing\\uqnu\\uqnu\\src\\features\\loader\\uploader.js",["308","309","310","311","312","313","314","315","316","317","318"],"import React from 'react';\r\nimport * as C from 'jtf-lib';\r\nimport * as R from './atfRender';\r\nimport {stream, ATFActions2Map} from './streamATF';\r\nimport JSZip from 'jszip';\r\nimport LoaderAppBar from './appBar';\r\nimport ScrollableTabsButtonAuto from './fileTabs';\r\nimport { ReactVirtualizedTable as RVT } from './virtualizedTable';\r\nimport Dropzone from 'react-dropzone-uploader';\r\nimport { ILayoutProps as dropzoneLayout } from 'react-dropzone-uploader';\r\n\r\nimport 'react-dropzone-uploader/dist/styles.css';\r\nimport './App.Loader.css';\r\n\r\nimport { ATFTextEditor } from './textEditor';\r\nimport {Grid, Drawer, IconButton, Zoom, Paper, Tooltip} from '@material-ui/core';\r\n\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport AccountTreeIcon from '@material-ui/icons/AccountTree';\r\n\r\nimport ChromeReaderModeOutlinedIcon from '@material-ui/icons/ChromeReaderModeOutlined';\r\n\r\nimport { Editor } from '../editor/Editor';\r\nimport { connect } from 'react-redux';\r\n\r\nimport { Panel } from '../editor/editorPanel';\r\n\r\nimport {\r\n  load,\r\n  loadAsync,\r\n  activate,\r\n  modify,\r\n  add,\r\n  remove,\r\n  undo,\r\n  redo,\r\n} from '../editor/editorSlice';\r\n\r\nimport {\r\n  updateDataMap,\r\n  loadJTFStart,\r\n  loadJTFCompleted,\r\n  openDropzoneDrawer,\r\n  closeDropzoneDrawer,\r\n  handleDropzoneChangeStatus,\r\n  switchFileTab,\r\n  selectTextRow,\r\n  editText,\r\n  saveEdit2File,\r\n  download,\r\n  downloadFile,\r\n  downloadAllFiles,\r\n  downloadCurrent,\r\n} from './loaderSlice';\r\n\r\nimport localforage from 'localforage';\r\n\r\n// global loading variables\r\nlet dataPromiseAtIndex = {};\r\nlet dataActiveKeys = [];\r\nlet dataLoaderTimeouts = {};\r\n\r\nconst resetLoading = ( ) =>\r\n    // reset global loading variables.\r\n    dataPromiseAtIndex = {};\r\n    dataLoaderTimeouts = {};\r\n\r\nconst asyncLoad = ( keys ) => {\r\n    //\r\n    keys = keys.filter( k => dataPromiseAtIndex[k] );\r\n    if (keys.length===0){ return; }\r\n    let k = keys.shift();\r\n    let pr = dataPromiseAtIndex[k];\r\n    Promise.resolve(pr.promiseFunct()).then( \r\n        result => {\r\n            pr.thenFunct( result );\r\n            asyncLoad( keys );\r\n    });\r\n};\r\n\r\nclass _ATFUploader extends React.Component {\r\n    // React component for uploading and checking ATF files.\r\n    constructor(props) {\r\n        super(props);\r\n        this.tableRef = React.createRef()\r\n        this.state = {\r\n            ATF_file_maps: [],\r\n            edit: null,\r\n            dropzoneDrawerOpen: false,\r\n            mode: 'ATF',\r\n            zoom: '200%',\r\n        };\r\n        localforage.getItem('ATF_file_maps').then( ATF_file_maps => {\r\n            if (ATF_file_maps){\r\n                this.setState({\r\n                    ATF_file_maps: ATF_file_maps.map( m => ATFActions2Map(m) )\r\n                })\r\n            };\r\n        })\r\n    };\r\n    \r\n    componentDidUpdate( prevProps ){\r\n        //\r\n        if (this.props.loader.loadJTF===true){\r\n            this.updateJTFStore();\r\n        };\r\n    };\r\n    \r\n    ATFMappingTracker = ( ChunkObj, linestream ) => {\r\n        // \r\n        // ToDo: replace this with progress bar functionality\r\n        // IMPORTANT: avarage CDLI AFT text size is 647.4 bytes\r\n    };\r\n    \r\n    updateJTFStore( ){\r\n        // Use to update redux store & local state\r\n        // upon change of active JTF to pass to editor.\r\n        let { fileDataMap, activeFileTab, activeTextRow } = this.props.loader;\r\n        let key = `${activeFileTab}_${activeTextRow}`;\r\n        if ( fileDataMap[key] ){\r\n            let JTF = fileDataMap[key].JTF;\r\n            this.props.load( JTF );\r\n            this.props.loadJTFCompleted();\r\n        };\r\n    };\r\n    \r\n    onFileStreamEnd = ( index, ATFMap ) => {\r\n        // Fires every time a file mapping is complete\r\n        let { ATF_file_maps } = this.state;\r\n        if (index!==null){\r\n            ATF_file_maps[index] = ATFMap;\r\n        } else {\r\n            ATF_file_maps.push(ATFMap);\r\n        };\r\n        this.setState({ATF_file_maps: ATF_file_maps})\r\n        localforage.setItem(\r\n            'ATF_file_maps', \r\n            [...ATF_file_maps].map( m => {\r\n                return { \r\n                    file: m.file, \r\n                    fileTextsMap: m.fileTextsMap, \r\n                    textsCount: m.textsCount\r\n                };\r\n            })\r\n        );\r\n        this.closeDropzoneDrawer();\r\n    };\r\n    \r\n    onAddButtonClick = () => {\r\n        // Fires when Add AppBar button is clicked.\r\n        this.setState({\r\n            dropzoneDrawerOpen: true\r\n        });\r\n    };\r\n    \r\n    closeDropzoneDrawer = () => {\r\n        // Call to close DropzoneDrawer.\r\n        if (this.state.dropzoneDrawerOpen){\r\n            this.setState({\r\n                dropzoneDrawerOpen: false\r\n            });\r\n        };\r\n    };\r\n    \r\n    onFileTabSwitch = ( tabIndex ) => {\r\n        // Fires when a fileTab is switched.\r\n        let { activeFileTab } = this.props.loader;\r\n        if (tabIndex!==activeFileTab){\r\n            resetLoading();\r\n            dataActiveKeys = dataActiveKeys.map( k => `${tabIndex}_${k.split('_')[1]}` );\r\n            this.props.switchFileTab( { tab: tabIndex } );\r\n        };\r\n    };\r\n    \r\n    onTextRowSelect = ( response ) => {\r\n        // Fires when a text row in virtualizedTable is selected.\r\n        let { activeTextRow } = this.props.loader;\r\n        let row = response.index;\r\n        if (activeTextRow!==row){\r\n            this.props.selectTextRow({ row: row });\r\n        };\r\n    };\r\n    \r\n    onTextEdit = ( newValue, oldValue ) => {\r\n        // Fires when a text is edited\r\n        this.setState({\r\n            edit: newValue,\r\n        });\r\n        let { activeFileTab, activeTextRow } = this.props.loader;\r\n        let key = `${activeFileTab}_${activeTextRow}`;\r\n        let data = JSON.parse(JSON.stringify(this.getCurrentData()));\r\n        let JTF = C.ATF2JTF( newValue );\r\n        JTF.reference = data.JTF.reference;\r\n        data.errors = JTF.errors;\r\n        data.warnings = JTF.warnings;\r\n        data.JTF = JTF;\r\n        this.props.updateDataMap({ data: data, key: key });\r\n        this.props.loadJTFStart();\r\n    };\r\n    \r\n    saveEdit2File = () => {\r\n        // Update file blob with changes from text editor\r\n        // and newly map it.\r\n        let { ATF_file_maps, edit } = this.state;\r\n        let { activeFileTab, activeTextRow } = this.props.loader;\r\n        let ATFMap = ATF_file_maps[activeFileTab];\r\n        Promise.resolve(ATFMap.actions.rewriteAtIndex(\r\n            activeTextRow,\r\n            this.props.editor.JTF.atf,\r\n            this.ATFMappingTracker,\r\n            this.onFileStreamEnd.bind(this, activeFileTab),\r\n        ));\r\n    };\r\n    \r\n    download = ( blob, name ) => {\r\n        // Downloader function.\r\n        let fileURL = window.URL.createObjectURL(blob);\r\n        let tempLink = document.createElement('a');\r\n        tempLink.href = fileURL;\r\n        tempLink.setAttribute('download', name);\r\n        tempLink.click();\r\n    };\r\n    \r\n    downloadFile = () => {\r\n        // Download active file.\r\n        let { ATF_file_maps } = this.state;\r\n        let { activeFileTab } = this.props.loader;\r\n        let ATFMap = ATF_file_maps[activeFileTab];\r\n        this.download(ATFMap.file, ATFMap.file.name);\r\n    };\r\n    \r\n    downloadAllFiles = () => {\r\n        // Download all loaded files.\r\n        let {ATF_file_maps} = this.state;\r\n        let {download} = this;\r\n        let zip = new JSZip();\r\n        ATF_file_maps.forEach( ATFMap => {\r\n            zip.file(`ATFcollection/${ATFMap.file.name}`, ATFMap.file);\r\n        });\r\n        zip.generateAsync({type:\"blob\"})\r\n        .then(function (blob) {\r\n            download(blob, \"ATFcollection.zip\");\r\n        });\r\n    };\r\n\r\n    downloadCurrent = () => {\r\n        // Downdload active text.\r\n        // Note that editor changes have to be saved in order to apply.\r\n        let { JTF } = this.props.editor;\r\n        let name = `${JTF.meta.p_number}.atf`;\r\n        let file = new File([JTF.atf], name, {type: 'text/plain',});\r\n        this.download(file, name);\r\n    };\r\n    \r\n    handleDropzoneChangeStatus = ({ meta, file }, status) => {\r\n        // called every time a file's `status` changes.\r\n        if (status==='done'){\r\n            // stream file to map it\r\n            // this.onFileStreamEnd fires when done\r\n            Promise.resolve(file).then((file) => {\r\n                stream(\r\n                    file,\r\n                    this.ATFMappingTracker,\r\n                    this.onFileStreamEnd.bind(this,null),\r\n                );\r\n            });\r\n        };\r\n    };\r\n    \r\n    onRowsRendered( rowsData ){\r\n        //\r\n        let { activeFileTab, fileDataMap } = this.props.loader;\r\n        let i = rowsData.overscanStartIndex;\r\n        let keys = [];\r\n        while (i < rowsData.overscanStopIndex+1){\r\n            keys.push( `${activeFileTab}_${i}` )\r\n            i++\r\n        };\r\n        Object.keys(dataPromiseAtIndex).forEach( k => {\r\n            if ( !keys.includes(k) ){\r\n                delete dataPromiseAtIndex[k]\r\n            }\r\n        });\r\n        keys.forEach( k => {\r\n            if (!fileDataMap[k] && !dataPromiseAtIndex[k]){\r\n                //console.log( 'key test', k.split('_')[1], k )\r\n                let index = parseInt(k.split('_')[1])\r\n                dataPromiseAtIndex[k] = this.loadDataAtIndex( index, k );\r\n                //console.log( 'key test data', k, dataPromiseAtIndex[k] )\r\n            };\r\n        })\r\n        dataActiveKeys = keys;\r\n        asyncLoad( keys );\r\n    };\r\n    \r\n    rowGetterFunction = ( index ) => {\r\n        // turn ATF table index into row data;\r\n        index = index.index;\r\n        let { activeFileTab, fileDataMap } = this.props.loader;\r\n        let k = `${activeFileTab}_${index}`;\r\n        //console.log(dataActiveKeys, k, dataActiveKeys.includes(k))\r\n        if (dataActiveKeys.includes(k) && !fileDataMap[k] && !dataPromiseAtIndex[k]){\r\n            dataPromiseAtIndex[k] = this.loadDataAtIndex( index, k );\r\n            asyncLoad( [k] );\r\n        };\r\n        return {\r\n            row: index,\r\n        };\r\n    };\r\n    \r\n    loadDataAtIndex( index, key ){\r\n        //\r\n        let { ATF_file_maps } = this.state;\r\n        let { activeFileTab, activeTextRow } = this.props.loader;\r\n        let { ATFAtIndex } = ATF_file_maps[activeFileTab].actions;\r\n        let filename = ATF_file_maps[activeFileTab].file.name;\r\n        \r\n        const resolveP = ( rawATFobj ) => {\r\n            delete dataPromiseAtIndex[key];\r\n            let { errors, warnings, success } = rawATFobj.JTFResponse;\r\n            let valid = (!success || errors.length>0) \r\n                ? false \r\n                : (warnings.length>0) ? undefined : true;\r\n            let data = {\r\n                index: index+1,\r\n                file: filename,\r\n                PNumber: rawATFobj.PNumber,\r\n                valid: valid,\r\n                errors: errors,\r\n                warnings: warnings,\r\n                JTF: rawATFobj.JTFResponse,\r\n            };\r\n            this.props.updateDataMap({ data: data, key: key });\r\n            if (activeTextRow===index){\r\n                this.updateJTFStore( );\r\n            };\r\n        };\r\n        \r\n        return {\r\n            promiseFunct: ATFAtIndex.bind( this, index ),\r\n            thenFunct: resolveP.bind( this ),\r\n        };\r\n    };\r\n    \r\n    countAllRowsCollection(){\r\n        //\r\n        // Count ATF texts in all uploaded files.\r\n        // If desired, the loader can handle all files \r\n        // in a single table. For that, use:\r\n        // ´rowCount = {this.countAllRowsCollection()}´\r\n        //\r\n        let { ATF_file_maps } = this.state;\r\n        if (ATF_file_maps.length===0){\r\n            return 0;\r\n        };\r\n        let counter = 0;\r\n        ATF_file_maps.forEach(function(ATFMap){\r\n            counter+=ATFMap.textsCount;\r\n        });\r\n        return counter;\r\n    };\r\n    \r\n    countRowsActiveFileTab = () => {\r\n        // count rows at active filetab, if found\r\n        let { ATF_file_maps } = this.state;\r\n        let { activeFileTab, activeTextRow } = this.props.loader;\r\n        if (ATF_file_maps.length===0){\r\n            return 0;\r\n        }\r\n        return ATF_file_maps[activeFileTab].textsCount\r\n    };\r\n    \r\n    getCurrentData = ( ) => {\r\n        // get data from loader store for current tab and row.\r\n        let { fileDataMap, activeFileTab, activeTextRow } = this.props.loader;\r\n        let key = `${activeFileTab}_${activeTextRow}`;\r\n        return (fileDataMap[key]) ? fileDataMap[key] : null;\r\n    };\r\n    \r\n    ATFMaps2Tabs = ( ) => {\r\n        // convert ATFMaps to tabs array\r\n        let { ATF_file_maps } = this.state;\r\n        return ATF_file_maps.map( ATFMap => {\r\n            return {\r\n                label: ATFMap.file.name,\r\n                content: (<div>content</div>)\r\n            }\r\n        })\r\n    };\r\n    \r\n    renderDropzone = () => {\r\n        // Define Dropzone Component.\r\n        return (\r\n            <Dropzone\r\n                onChangeStatus = {this.handleDropzoneChangeStatus}\r\n                accept = \".atf, .txt\"\r\n                PreviewComponent = {null}\r\n                LayoutComponent = {dropzoneLayout}\r\n                callback = {this.props.parentCallback}\r\n                output = {this.props.output}\r\n                maxFiles = {50}\r\n            />\r\n        );\r\n    };\r\n    \r\n    renderDropzoneDrawer = () => {\r\n        // \r\n        let {dropzoneDrawerOpen} = this.state;\r\n        let closeButton = (\r\n            <IconButton\r\n                aria-label=\"close\"\r\n                onClick={this.closeDropzoneDrawer}\r\n                color=\"inherit\"\r\n                edge='end'\r\n                style={{\r\n                    float: 'right'\r\n                }}\r\n            >\r\n                <CloseIcon />\r\n            </IconButton>\r\n        );\r\n        return (\r\n            <Drawer anchor='top' open={dropzoneDrawerOpen}>\r\n                <Grid item xs={11}>\r\n                    {closeButton}\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                    {this.renderDropzone()}\r\n                </Grid>\r\n            </Drawer>\r\n        );\r\n    };\r\n    \r\n    renderFileTabs = () => {\r\n        // Define FileTabs component.\r\n        let tabs = this.ATFMaps2Tabs();\r\n        return (\r\n            <ScrollableTabsButtonAuto\r\n                tabGetter={this.ATFMaps2Tabs.bind(this)}\r\n                handleChangeCallback={this.onFileTabSwitch}\r\n                tabs={tabs}\r\n            />\r\n        );\r\n    };\r\n    \r\n    renderVirtualTable = (allCollection=false) => {\r\n        // Define React Virtual Table Component.\r\n        // Use `allCollection=true` to put all files'\r\n        // data in single tablet.\r\n        let { activeTextRow } = this.props.loader;\r\n        let rowCount = (allCollection)\r\n            ? this.countAllRowsCollection()\r\n            : this.countRowsActiveFileTab()\r\n        return (\r\n            <RVT\r\n                rowGetter={this.rowGetterFunction.bind(this)}\r\n                rowCount={rowCount}\r\n                selectRowCallback={this.onTextRowSelect.bind(this)}\r\n                activeTextRow={activeTextRow}\r\n                onRowsRendered={this.onRowsRendered.bind(this)}\r\n            />\r\n        );\r\n    };\r\n    \r\n    renderTooltip( title, children ){\r\n        // Tooltip wrapper.\r\n        return <Tooltip title={title}>{children}</Tooltip>\r\n    };\r\n    \r\n    renderEditorPanel = () => {\r\n        // \r\n        let { mode } = this.state;\r\n        let switchMode = () => {\r\n            this.setState({mode: (mode==='ATF') ? 'JTF' : 'ATF'})\r\n        };\r\n        let switchButton = (mode==='JTF') \r\n            ? <AccountTreeIcon\r\n                id='switchMode'\r\n                onClick={switchMode}\r\n                />\r\n            : <ChromeReaderModeOutlinedIcon\r\n                id='switchMode'\r\n                onClick={switchMode}\r\n                />;\r\n        let tooltipTitle = (mode==='ATF') ? 'formatted' : 'ATF' ;\r\n        switchButton = this.renderTooltip(`switch to ${tooltipTitle} view`, switchButton)\r\n        let buttons = [switchButton]\r\n        return (\r\n            <Paper\r\n                elevation={0}\r\n                id='editorPanel'\r\n            >\r\n            { buttons }\r\n            { <Panel renderTooltip={this.renderTooltip.bind(this)}/> }\r\n            </Paper> \r\n        );\r\n    };\r\n    \r\n    renderEditor = () => {\r\n        // \r\n        let { mode, zoom } = this.state;\r\n        let editorComponent = (mode==='ATF') \r\n            ? this.renderATFTextEditor()\r\n            : (mode==='JTF') \r\n            ? this.renderUqNUEditor()\r\n            : '';\r\n        return (\r\n        <Zoom in={true} style={{transitionDelay: '500ms'}}>\r\n            <Paper \r\n                id='editorContainer'\r\n                className={mode}\r\n            >\r\n            <div id='zoom' style={{ \r\n                transformOrigin: '0 0',\r\n                transform: 'scale(500%)',//DOES NOT WORK!\r\n                }}\r\n            >\r\n                {editorComponent}\r\n            </div>\r\n            </Paper>\r\n        </Zoom>\r\n      );\r\n    };\r\n    \r\n    renderUqNUEditor = () => {\r\n        // JTF structure view.\r\n        return (\r\n            <Editor\r\n            />\r\n        );\r\n    };\r\n    \r\n    renderATFTextEditor = ( ) => {\r\n        // ATFTextEditor ACE Component view.\r\n        let { edit } = this.state;\r\n        let { activeTextRow } = this.props.loader;\r\n        let data = this.getCurrentData();\r\n        //let content = (edit) ? edit : (data && data.JTF) ? data.JTF.atf : '';\r\n        //{/*content={content}*/}\r\n        return (\r\n        <ATFTextEditor\r\n          index={activeTextRow}\r\n          data={data}\r\n          onChange={this.onTextEdit.bind(this)}\r\n          edit={edit}\r\n          save2file={this.saveEdit2File.bind(this)}\r\n        />)\r\n    };\r\n    \r\n    renderAppBar = () => {\r\n        //\r\n        let {ATF_file_maps} = this.state;\r\n        return (\r\n            <LoaderAppBar\r\n                downloadFile={this.downloadFile.bind(this)}\r\n                downloadAllFiles={\r\n                    (ATF_file_maps.length>1) \r\n                    ? this.downloadAllFiles.bind(this) : null\r\n                }\r\n                downloadCurrent={this.downloadCurrent.bind(this)}\r\n                onAddButtonClick={this.onAddButtonClick.bind(this)}\r\n            />\r\n        );\r\n    };\r\n    \r\n    renderAnalytics = () => {\r\n        //\r\n        return (<>\r\n            <script src=\"/__/firebase/7.14.1/firebase-app.js\"></script>\r\n            <script src=\"/__/firebase/7.14.1/firebase-analytics.js\"></script>\r\n            <script src=\"/__/firebase/init.js\"></script>\r\n        </>)\r\n    };\r\n    \r\n    renderAll = ( gridStyle ) => {\r\n        // Render loaded texts.\r\n        let view = (\r\n            <Grid container \r\n                spacing={1} \r\n                style={gridStyle}\r\n                alignItems='stretch'\r\n                justify='flex-start'\r\n            >    \r\n                <Grid item xs={12} style={{paddingBottom: `50px`}}>\r\n                    {this.renderAppBar()}\r\n                </Grid>\r\n                <Grid container item xs={12}>\r\n                    {this.renderDropzoneDrawer()}\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                    {this.renderFileTabs()}\r\n                </Grid>\r\n                <Grid item xs={4} \r\n                    style={{\r\n                        maxWidth: `250px`,\r\n                        height: `100%`,\r\n                        }}\r\n                >\r\n                    {this.renderVirtualTable()}\r\n                </Grid>\r\n                <Grid item xs={8} \r\n                    style={{\r\n                        flexBasis: `calc(100% - 250px)`,\r\n                        maxWidth: `100%`,\r\n                        height: `100%`,\r\n                        }}\r\n                >   \r\n                    {this.renderEditorPanel( )}\r\n                    {this.renderEditor( )}\r\n                </Grid>\r\n            </Grid>\r\n        );\r\n        return view;\r\n    };\r\n    \r\n    render(){\r\n        //\r\n        let gridStyle = {\r\n            margin: 0,\r\n            flexGrow: 0,\r\n            maxWidth: `100%`,\r\n            flexBasis: `100%`,\r\n        };\r\n        return (\r\n            <>\r\n                {this.renderAll(gridStyle)}\r\n                {this.renderAnalytics()}\r\n            </>\r\n        );\r\n    };\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n    //console.log( 'redux state:', state )\r\n    return state;\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n    load,\r\n    loadAsync,\r\n    updateDataMap,\r\n    loadJTFStart,\r\n    loadJTFCompleted,\r\n    openDropzoneDrawer,\r\n    closeDropzoneDrawer,\r\n    handleDropzoneChangeStatus,\r\n    switchFileTab,\r\n    selectTextRow,\r\n    editText,\r\n    saveEdit2File,\r\n    download,\r\n    downloadFile,\r\n    downloadAllFiles,\r\n    downloadCurrent,\r\n};\r\n\r\nexport const ATFUploader = connect(mapStateToProps, mapDispatchToProps)(_ATFUploader)",["319","320"],"C:\\Users\\Eli\\Desktop\\programmatical\\Cuneiform_and_ANE\\Cuneiform_processing\\uqnu\\uqnu\\src\\features\\editor\\ChrComponent.js",["321"],"C:\\Users\\Eli\\Desktop\\programmatical\\Cuneiform_and_ANE\\Cuneiform_processing\\uqnu\\uqnu\\src\\features\\loader\\fileTabs.js",["322","323"],"C:\\Users\\Eli\\Desktop\\programmatical\\Cuneiform_and_ANE\\Cuneiform_processing\\uqnu\\uqnu\\src\\features\\loader\\textEditor.js",["324","325","326","327","328","329","330","331","332","333","334","335"],"C:\\Users\\Eli\\Desktop\\programmatical\\Cuneiform_and_ANE\\Cuneiform_processing\\uqnu\\uqnu\\src\\index.js",[],["336","337"],"C:\\Users\\Eli\\Desktop\\programmatical\\Cuneiform_and_ANE\\Cuneiform_processing\\uqnu\\uqnu\\src\\app\\store.js",[],"C:\\Users\\Eli\\Desktop\\programmatical\\Cuneiform_and_ANE\\Cuneiform_processing\\uqnu\\uqnu\\src\\features\\editor\\Editor.js",["338","339","340","341","342","343","344","345","346","347","348"],"C:\\Users\\Eli\\Desktop\\programmatical\\Cuneiform_and_ANE\\Cuneiform_processing\\uqnu\\uqnu\\src\\features\\loader\\atfRender.js",["349","350"],"C:\\Users\\Eli\\Desktop\\programmatical\\Cuneiform_and_ANE\\Cuneiform_processing\\uqnu\\uqnu\\src\\features\\loader\\virtualizedTable.js",["351","352","353","354","355"],"C:\\Users\\Eli\\Desktop\\programmatical\\Cuneiform_and_ANE\\Cuneiform_processing\\uqnu\\uqnu\\src\\features\\loader\\appBar.js",["356"],"C:\\Users\\Eli\\Desktop\\programmatical\\Cuneiform_and_ANE\\Cuneiform_processing\\uqnu\\uqnu\\src\\features\\loader\\streamATF.js",["357","358","359","360","361","362"],"import * as C from 'jtf-lib';\r\n\r\n//var DelimiterStream = require('delimiter-stream');\r\nvar StringDecoder = require('string_decoder').StringDecoder;\r\nvar decoder = new StringDecoder('utf8');\r\n//var toStream = require('blob-to-stream');\r\nconst {ReadableWebToNodeStream} = require('readable-web-to-node-stream');\r\n\r\n/* var es = require('event-stream');\r\nvar inspect = require('util').inspect;\r\n */\r\nvar _ = require('highland');\r\n\r\nconst chunk2TableData = (\r\n\tchunk, chunkDecoded, PNumber, linesCount, beginsAtLine, \r\n\tchunkStartsAt, chunkEndsAt, options) => {\r\n\t//\r\n\treturn {\r\n\t\t\t//string: chunkDecoded,\r\n\t\t\tPNumber: PNumber,\r\n\t\t\tchunkStartsAt: chunkStartsAt,\r\n\t\t\tchunkEndsAt: chunkStartsAt+chunk.length,\r\n\t\t\tbeginsAtLine: beginsAtLine,\r\n\t\t\tendsAtLine: beginsAtLine+linesCount,\r\n\t\t\t...options\r\n\t\t};\r\n};\r\n\r\nconst mapTextsInBuffer = function(arrBuff, offset, push, size) {\r\n\t//\r\n\tlet Uint8Arr = new Uint8Array(arrBuff);\r\n\tUint8Arr.forEach(function(x, i) {\r\n\t\tlet delim = [];\r\n\t\tif (offset+i===0) { //first line\r\n\t\t\tif (i+1 < Uint8Arr.length){\r\n\t\t\t\tdelim = Array.from(Uint8Arr.slice(i, i+2))\r\n\t\t\t}\r\n\t\t} else if (x===10) { //every new line\r\n\t\t\tif (i+2 < Uint8Arr.length){\r\n\t\t\t\ti++\r\n\t\t\t\tdelim = Array.from(Uint8Arr.slice(i, i+2))\r\n\t\t\t};\r\n\t\t};\r\n\t\tif (delim[0]===38 && delim[1]===80){ //i.e. '&P'\r\n\t\t\tpush(null, offset+i);\r\n\t\t};\r\n\t\tif (offset+i+1===size){ \r\n\t\t\tpush(null, _.nil)\r\n\t\t};\r\n\t});\r\n};\r\n\r\nconst file2textsMap = function(file) {\r\n\t//\r\n\treturn _(function (push, next) {\r\n\t\tlet size = file.size;\r\n\t\t//let delimiter = Buffer.from('\\n&P');\r\n\t\tlet last = false;\r\n\t\tlet fSlice = null;\r\n\t\tfor (let begin = 0; begin < size; begin+=100000){\r\n\t\t\tif (begin+100000 >= size ){\r\n\t\t\t\tlast = true\r\n\t\t\t\tfSlice = file.slice(begin, size)\r\n\t\t\t} else {\r\n\t\t\t\tfSlice = file.slice(begin, begin+100002);\r\n\t\t\t}\r\n\t\t\tfSlice.arrayBuffer()\r\n\t\t\t.then(\r\n\t\t\t\t(arrBuff) => {\r\n\t\t\t\t\tmapTextsInBuffer(arrBuff, begin, push, size);\r\n\t\t\t\t}\r\n\t\t\t);\r\n\t\t\tif (last){ break };\r\n\t\t};\r\n\t});\r\n};\r\n\r\nexport const stream = (file, callback, callbackEnd) => {\r\n\t//\r\n\t//var input = toStream(file, { highWaterMark: 1024 }); //!!! This causes memory crash with large files\r\n\tconst input = new ReadableWebToNodeStream(file.stream());\r\n\tvar beginsAtLine = 1;\r\n\tvar chunksCounter = 0;\r\n\tvar fileTextsMap = [];\r\n\tvar delimiter = '\\n&P';\r\n\tvar splitter = file2textsMap(file); // that's a nodeJS stream\r\n\t\r\n\tsplitter.on('data', function(chunk) {\r\n\t\tsplitter.pause();\r\n\t\tfileTextsMap.push(chunk);\r\n\t\tchunksCounter++\r\n\t\tif (chunksCounter%1000===0){ \r\n\t\t\tconsole.log('so far:', chunksCounter)\r\n\t\t}\r\n\t\tsplitter.resume();\r\n\t});\r\n\t\r\n\tsplitter.on('end', () => {\r\n\t\tfileTextsMap.push(file.size);\r\n\t\t//console.log('total:', chunksCounter);\r\n\t\tlet ATFMap = {\r\n\t\t\tfile: file,\r\n\t\t\tfileTextsMap: fileTextsMap,\r\n\t\t\ttextsCount: chunksCounter,\r\n\t\t};\r\n\t\tcallbackEnd( ATFActions2Map( ATFMap ) );\r\n\t});\r\n};\r\n\r\nexport const ATFActions2Map = function( map ){\r\n\t//\r\n\tlet { file, fileTextsMap, textsCount } = map;\r\n\tconst getCoordinates = function(i){\r\n\t\t//\r\n\t\treturn [fileTextsMap[i], fileTextsMap[i+1]]\r\n\t};\r\n\t\r\n\tconst getTextObject = function(string, index){\r\n\t\t//\r\n\t\tlet getJTF = C.ATF2JTF.bind(this, string, map.file.name);\r\n\t\t//console.log('! atf2jtf at index', index)\r\n\t\treturn {\r\n\t\t\tPNumber: string.slice(1, 8),\r\n\t\t\tstring: string,\r\n\t\t\t//map: map,\r\n\t\t\tindex: index,\r\n\t\t\tJTFResponse: getJTF(),\r\n\t\t};\r\n\t};\r\n\t\r\n\tconst ATFAtIndex = (index, callback=null) => {\r\n\t\t//\r\n\t\t//console.log( 'requesting ATF at index', index )\r\n\t\tif (index<=textsCount){\r\n\t\t\tlet [start, end] = getCoordinates(index);\r\n\t\t\treturn file.slice(start, end).text().then(\r\n\t\t\t\t(string) => {\r\n\t\t\t\t\tlet atfObj = getTextObject(string, index)\r\n\t\t\t\t\tif (callback){\r\n\t\t\t\t\t\tcallback(atfObj)\r\n\t\t\t\t\t};\r\n\t\t\t\t\treturn atfObj;\r\n\t\t\t\t}\r\n\t\t\t);\r\n\t\t} else {\r\n\t\t\tif (callback){\r\n\t\t\t\tcallback(null);\r\n\t\t\t};\r\n\t\t\treturn null;\r\n\t\t};\r\n\t};\r\n\t\r\n\tconst arrToFile = (arr) => {\r\n\t\t//\r\n\t\tlet { name, webkitRelativePath, type } = file;\r\n\t\treturn new File(arr, name, {type: type,});\r\n\t};\r\n\t\r\n\tconst rewriteAtIndex = (index, string, callback, callbackEnd) => {\r\n\t\t// \r\n\t\tif (index<=textsCount){\r\n\t\t\tlet [start, end] = getCoordinates(index);\r\n\t\t\tlet first = file.slice(0, start);\r\n\t\t\tlet last = file.slice(end, file.size);\r\n\t\t\tPromise.resolve(first).then(first => {\r\n\t\t\t\tPromise.resolve(last).then(last => {\r\n\t\t\t\t\tlet newFile = arrToFile([first, string, last]);\r\n\t\t\t\t\tstream(newFile, callback, callbackEnd);\r\n\t\t\t\t})\r\n\t\t\t});\r\n\t\t} else {\r\n\t\t\treturn null;\r\n\t\t};\r\n\t};\r\n\t\r\n\tlet actions = { \r\n\t\t\tATFAtIndex: ATFAtIndex, \r\n\t\t\trewriteAtIndex: rewriteAtIndex,\r\n\t};\r\n\treturn {...map, actions: actions}\r\n};\r\n\r\n","C:\\Users\\Eli\\Desktop\\programmatical\\Cuneiform_and_ANE\\Cuneiform_processing\\uqnu\\uqnu\\src\\features\\editor\\editorPanel.js",["363","364","365","366","367","368","369","370","371","372","373","374","375","376","377"],"C:\\Users\\Eli\\Desktop\\programmatical\\Cuneiform_and_ANE\\Cuneiform_processing\\uqnu\\uqnu\\src\\features\\editor\\editorSlice.js",[],"C:\\Users\\Eli\\Desktop\\programmatical\\Cuneiform_and_ANE\\Cuneiform_processing\\uqnu\\uqnu\\src\\App.js",["378","379"],"C:\\users\\eli\\desktop\\programmatical\\cuneiform_and_ane\\cuneiform_processing\\uqnu\\uqnu\\src\\App.js",["380","381"],"import React, { useEffect } from \"react\";\r\nimport \"./App.css\";\r\n//import logo from './logo.svg';\r\nimport { ATFUploader } from './features/loader/uploader';\r\n//import { fetchATF } from \"./services/API\";\r\nimport { Editor } from './features/editor/Editor';\r\n\r\n/* function App () {\r\n  // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  useEffect(async () => {\r\n    async function getData() {\r\n      let atf_arr = []; // array of atf data\r\n      const lastindex = window.location.pathname.split(\"/\").pop();\r\n      if (lastindex) {\r\n        const id_arr = lastindex.split(\"&\");\r\n        for (let index = 0; index < id_arr.length; index++) {\r\n          const ID = id_arr[index];\r\n          // API call- Framework\r\n          const atf = await fetchATF(ID);\r\n          if (atf) {\r\n            atf_arr.push(atf.data);\r\n          }\r\n        }\r\n        console.log(atf_arr);\r\n      }\r\n    }\r\n    // will fetch the ATF data from given ID's in URL\r\n    getData();\r\n  }, []);\r\n}; */\r\n\r\nfunction App() {\r\n    \r\n    return (\r\n    <div className=\"App\">\r\n    <ATFUploader/>\r\n    </div>\r\n    )\r\n};\r\n\r\nexport default App;\r\n\r\n/* function App() {\r\n    \r\n    return (\r\n    <div className=\"App\">\r\n    <ATFUploader/>\r\n    </div>\r\n    )\r\n};\r\n    \r\n   //older:\r\n   return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n        <Editor />\r\n        <p>\r\n          Edit <code>src/App.js</code> and save to reload.\r\n        </p>\r\n        <span>\r\n          <span>Learn </span>\r\n          <a\r\n            className=\"App-link\"\r\n            href=\"https://reactjs.org/\"\r\n            target=\"_blank\"\r\n            rel=\"noopener noreferrer\"\r\n          >\r\n            React\r\n          </a>\r\n          <span>, </span>\r\n          <a\r\n            className=\"App-link\"\r\n            href=\"https://redux.js.org/\"\r\n            target=\"_blank\"\r\n            rel=\"noopener noreferrer\"\r\n          >\r\n            Redux\r\n          </a>\r\n          <span>, </span>\r\n          <a\r\n            className=\"App-link\"\r\n            href=\"https://redux-toolkit.js.org/\"\r\n            target=\"_blank\"\r\n            rel=\"noopener noreferrer\"\r\n          >\r\n            Redux Toolkit\r\n          </a>\r\n          ,<span> and </span>\r\n          <a\r\n            className=\"App-link\"\r\n            href=\"https://react-redux.js.org/\"\r\n            target=\"_blank\"\r\n            rel=\"noopener noreferrer\"\r\n          >\r\n            React Redux\r\n          </a>\r\n        </span>\r\n      </header>\r\n    </div>\r\n  );\r\n} */",["382","383"],"C:\\users\\eli\\desktop\\programmatical\\cuneiform_and_ane\\cuneiform_processing\\uqnu\\uqnu\\src\\features\\editor\\editorSlice.js",[],["384","385"],"C:\\users\\eli\\desktop\\programmatical\\cuneiform_and_ane\\cuneiform_processing\\uqnu\\uqnu\\src\\services\\API\\index.js",["386"],"import axios from \"../axios/index.js\";\r\n\r\nconst id = 1;\r\nexport const fetchATF = async (PID) => {\r\n   if(PID){ \r\n        try {\r\n            const data = await axios.get(`artifacts/${PID}/inscription`);\r\n            return data;\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n} ",["387","388"],"C:\\users\\eli\\desktop\\programmatical\\cuneiform_and_ane\\cuneiform_processing\\uqnu\\uqnu\\src\\serviceWorker.js",[],["389","390"],"C:\\users\\eli\\desktop\\programmatical\\cuneiform_and_ane\\cuneiform_processing\\uqnu\\uqnu\\src\\features\\editor\\ChrComponent.js",["391"],"C:\\users\\eli\\desktop\\programmatical\\cuneiform_and_ane\\cuneiform_processing\\uqnu\\uqnu\\src\\features\\loader\\atfRender.js",["392","393"],"//=== Imports ================================================================\r\n//\r\nimport React from 'react';\r\n//import logo from './logo.svg';\r\n//import '../../App.css';\r\n\r\n/* material-ui */\r\n//import Icon from '@material-ui/core/Icon';\r\n//import AddCircle from '@material-ui/icons/AddCircle';\r\n\r\nimport * as C from 'jtf-lib';\r\n\r\n/*---/ Classes /------------------------------------------------------------*/\r\n\r\n//import ObjUqNU from './../Editor/textComponents/Object';\r\n//import Surface from './../Editor/textComponents/Surface';\r\n\r\nexport const renderATF = function( atf, reference ){\r\n\t//\r\n\tvar surfaces = [];\r\n\tvar response = null; //C.ATF2JTF( atf, reference );\r\n\tconsole.log('! response !')\r\n\tif ( response.JTF ) {\r\n\t\treturn (\r\n\t\t//<div id='notebook'><ObjUqNU {...response.JTF.objects[0]}/></div>\r\n\t\t<span>[text placeholder]</span>\r\n\t\t);\r\n\t};\r\n\treturn <div id='parsingError'>Parsing failed</div>\r\n};\r\n","C:\\users\\eli\\desktop\\programmatical\\cuneiform_and_ane\\cuneiform_processing\\uqnu\\uqnu\\src\\features\\editor\\editorPanel.js",["394","395","396","397","398","399","400","401","402","403","404","405","406","407","408","409"],"import React from 'react';\r\n\r\nimport { useSelector, useDispatch, connect, mapDispatchToProp } from 'react-redux';\r\nimport {\r\n  selectActions,\r\n  setCursor,\r\n  activate,\r\n  modify,\r\n  add,\r\n  remove,\r\n  undo,\r\n  redo,\r\n  changeZoom,\r\n} from './editorSlice';\r\n\r\n// Editor panel buttons:\r\nimport { \r\n  Select, \r\n  FormControl,\r\n  InputLabel,\r\n  Popper,\r\n  Paper,\r\n  SvgIcon,\r\n  Divider,\r\n  Slider } from '@material-ui/core';\r\nimport { withStyles } from '@material-ui/core/styles';\r\n\r\nimport ToggleButton from '@material-ui/lab/ToggleButton';\r\nimport ToggleButtonGroup from '@material-ui/lab/ToggleButtonGroup';\r\n\r\nimport GrainOutlinedIcon from '@material-ui/icons/GrainOutlined';\r\nimport PlaylistAddIcon from '@material-ui/icons/PlaylistAdd';\r\nimport PostAddIcon from '@material-ui/icons/PostAdd';\r\n\r\nimport { Icon, InlineIcon } from '@iconify/react';\r\nimport tableColumnPlusAfter from '@iconify-icons/mdi/table-column-plus-after';\r\nimport stamperIcon from '@iconify-icons/mdi/stamper';\r\nimport focusFieldHorizontal from '@iconify-icons/mdi/focus-field-horizontal';\r\nimport shapeSquareRoundedPlus from '@iconify-icons/mdi/shape-square-rounded-plus';\r\nimport alphaLBoxOutline from '@iconify-icons/mdi/alpha-l-box-outline';\r\nimport abjadHebrew from '@iconify-icons/mdi/abjad-hebrew';\r\nimport commentTextOutline from '@iconify-icons/mdi/comment-text-outline';\r\nimport trayPlus from '@iconify-icons/mdi/tray-plus';\r\nimport codeBrackets from '@iconify-icons/mdi/code-brackets';\r\nimport circleOutline from '@iconify-icons/mdi/sticker-circle-outline';\r\nimport circleOffOutline from '@iconify-icons/mdi/circle-off-outline';\r\nimport eraserIcon from '@iconify-icons/mdi/eraser';\r\nimport bookshelfIcon from '@iconify-icons/mdi/bookshelf';\r\nimport plusBoxOutline from '@iconify-icons/mdi/plus-box-outline';\r\n\r\nimport cardBulletedOutline from '@iconify-icons/mdi/card-bulleted-outline';\r\nimport formTextbox from '@iconify-icons/mdi/form-textbox';\r\n\r\nimport ClickAwayListener from '@material-ui/core/ClickAwayListener';\r\n\r\nconst typeData = {\r\n    syl: 'syllabogram',\r\n    log: 'logogram',\r\n    det: 'determinative',\r\n    num: 'numeral',\r\n    pnc: 'punctation',\r\n    ucl: 'unclear',\r\n};\r\n\r\nconst langData = {\r\n    \r\n};\r\n\r\nconst periodData = {\r\n    \r\n};\r\n\r\nconst genreData = {\r\n    \r\n};\r\n\r\nconst current = {\r\n    type: 'syl',\r\n};\r\n\r\n\r\nconst StyledToggleButtonGroup = withStyles((theme) => ({\r\n  grouped: {\r\n    //margin: theme.spacing(0.5),\r\n    border: 'none',\r\n    '&:not(:first-child)': {\r\n      borderRadius: theme.shape.borderRadius,\r\n    },\r\n    '&:first-child': {\r\n      borderRadius: theme.shape.borderRadius,\r\n    },\r\n  },\r\n}))(ToggleButtonGroup);\r\n\r\nclass _Panel extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            type_ref: null,\r\n        };\r\n    };\r\n    \r\n    makeToggleButtonGroup = ( content, orientation='horizontal', style={} ) => {\r\n        //\r\n        return (\r\n          <StyledToggleButtonGroup\r\n            value={ 'syl' }\r\n            exclusive={true}\r\n            size=\"small\"\r\n            aria-label=\"type\"\r\n            orientation={ orientation }\r\n            style={style}\r\n          >\r\n          { content }\r\n          </StyledToggleButtonGroup>\r\n        );\r\n    };\r\n    \r\n    makeToggleButtonWithTooltip = ( content, tip, id=null, handleClick=null ) => {\r\n        //\r\n        let { cursor } = this.props;\r\n        let popper_anchor = this.state[`${id}_ref`];\r\n        if (!handleClick){\r\n          handleClick = (event) => {\r\n            let new_anchor = (popper_anchor) ? null : event.currentTarget;\r\n            this.setState({ [`${id}_ref`]: new_anchor })\r\n          };\r\n        };\r\n        \r\n        let style = { minWidth: '50px' };\r\n        if (['?', '!'].includes(content)){ \r\n          style = {...style, fontSize: '14px', fontWeight: '800'}\r\n        };\r\n        return this.props.renderTooltip(\r\n          tip,\r\n          <ToggleButton\r\n           value=\"justify\"\r\n           aria-label=\"justified\"\r\n           onClick={handleClick.bind(this)}\r\n           { ...(id) ? {'aria-describedby': id} : '' }\r\n           style={style}\r\n           selected={(cursor && id && cursor[id]) ? true : false }\r\n          >\r\n          { content }\r\n          </ToggleButton>\r\n        );\r\n    };\r\n    \r\n    makePopper = ( content, popper_id ) => {\r\n      //\r\n      let popper_anchor = this.state[`${popper_id}_ref`];\r\n      let hidePopper = () => {\r\n        if (popper_anchor){\r\n          this.setState({[`${popper_id}_ref`]: false});\r\n        }\r\n      };\r\n      return (\r\n        <Popper\r\n         id={popper_id}\r\n         open={(popper_anchor) ? true : false }\r\n         anchorEl={popper_anchor}\r\n         placement='bottom-start'\r\n         style={{zIndex: '1'}}\r\n         >\r\n          <ClickAwayListener onClickAway={hidePopper.bind(this)}>\r\n            <Paper\r\n              elevation={1}\r\n            >\r\n              { content }\r\n            </Paper>\r\n          </ClickAwayListener>\r\n        </Popper>\r\n      );\r\n    };\r\n    \r\n    makeAddButtons = () => {\r\n      //\r\n      let addSignButton = this.makeToggleButtonWithTooltip(\r\n        <SvgIcon><Icon icon={plusBoxOutline}/></SvgIcon>, \r\n        'add sign');\r\n      let addSequenceButton = this.makeToggleButtonWithTooltip(\r\n        <SvgIcon><Icon icon={formTextbox}/></SvgIcon>, \r\n        'add sequence');\r\n      let addLineButton = this.makeToggleButtonWithTooltip(<PlaylistAddIcon/>,\r\n        'add line');\r\n      let addSurfaceButton = this.makeToggleButtonWithTooltip(<PostAddIcon/>,\r\n        'add surface');\r\n      let addColumnButton = this.makeToggleButtonWithTooltip(\r\n        <SvgIcon><Icon icon={tableColumnPlusAfter}/></SvgIcon>, \r\n        'add column');\r\n      let addSealImpressionButton = this.makeToggleButtonWithTooltip(\r\n        <SvgIcon><Icon icon={stamperIcon}/></SvgIcon>, \r\n        'add seal impression');\r\n      let addModifierButton = this.makeToggleButtonWithTooltip(\r\n        <SvgIcon><Icon icon={focusFieldHorizontal}/></SvgIcon>, \r\n        'add modifier');\r\n      let addObjectButton = this.makeToggleButtonWithTooltip(\r\n        <SvgIcon><Icon icon={shapeSquareRoundedPlus} /></SvgIcon>, \r\n        'add object');\r\n      let addCommentaryButton = this.makeToggleButtonWithTooltip(\r\n        <SvgIcon><Icon icon={commentTextOutline}/></SvgIcon>, \r\n        'add commentary');\r\n      let addFieldButton = this.makeToggleButtonWithTooltip(\r\n        <SvgIcon><Icon icon={trayPlus}/></SvgIcon>, \r\n        'add field');\r\n      return [\r\n        addSignButton,\r\n        addSequenceButton,\r\n        addFieldButton,\r\n        addLineButton,\r\n        addColumnButton,\r\n        addSurfaceButton,\r\n        addObjectButton,\r\n        addSealImpressionButton,\r\n        addModifierButton,\r\n        addCommentaryButton,\r\n      ];\r\n    };\r\n    \r\n    updateCursor = ( updateDict ) => {\r\n      //\r\n      let { cursor, setCursor } = this.props;\r\n      setCursor({cursor: {...cursor, ...updateDict}})\r\n    };\r\n    \r\n    makeTypeBotton = ( ) => {\r\n      //\r\n      let { cursor } = this.props;\r\n      let cursorType = (cursor && cursor.type) ? cursor.type : 'ucl';\r\n      let updateType = event => {\r\n          let value = event.target.innerText.toLowerCase();\r\n          this.setState({type_ref: false});\r\n          this.updateCursor({type: value})\r\n      };\r\n      let typeArray = Object.keys(typeData).map(\r\n        key => { if (key!==cursorType){\r\n            return this.makeToggleButtonWithTooltip(\r\n              key,\r\n              typeData[key],\r\n              `type_${typeData[key]}`,\r\n              updateType,\r\n            );\r\n        }}\r\n      );\r\n      let typeGroup = this.makeToggleButtonGroup(\r\n        typeArray,\r\n        'vertical',\r\n        );\r\n      let typeButton = this.makeToggleButtonWithTooltip(\r\n        cursorType,\r\n        `value type (${typeData[cursorType]})`, \r\n        'type',\r\n      );\r\n      let typeButtonPopper = this.makePopper( typeGroup, 'type' );\r\n      return [typeButton, typeButtonPopper];\r\n    };\r\n    \r\n    makeExclamationButton = () => {\r\n        //\r\n        let { cursor } = this.props;\r\n        return this.makeToggleButtonWithTooltip(\r\n          '!',\r\n          'sic',\r\n          'exclamation',\r\n          event => { (cursor && cursor.exclamation) \r\n            ? this.updateCursor({exclamation: false})\r\n            : this.updateCursor({exclamation: true})\r\n          }\r\n        );\r\n    };\r\n    \r\n    makeQuestionButton = () => {\r\n        //\r\n        let { cursor } = this.props;\r\n        return this.makeToggleButtonWithTooltip(\r\n            '?',\r\n            'uncertain',\r\n            'question',\r\n            event => { (cursor && cursor.question) \r\n              ? this.updateCursor({question: false})\r\n              : this.updateCursor({question: true})\r\n            }\r\n        );\r\n    };\r\n    \r\n    makeChrButtons = () => {\r\n      //\r\n      let { cursor } = this.props;\r\n      let GDLButton = this.makeToggleButtonWithTooltip('GDL', 'Grapheme Description Language');\r\n      let referenceButton = this.makeToggleButtonWithTooltip('Ref', 'sign list reference');\r\n\r\n      let modifierButton = this.makeToggleButtonWithTooltip('mod', 'modifier');\r\n      let variantButton = this.makeToggleButtonWithTooltip('var', 'variant');\r\n      let damageButton = this.makeToggleButtonWithTooltip(<GrainOutlinedIcon/>, 'damage', 'damage');\r\n      let exclamationButton = this.makeExclamationButton();\r\n      let questionButton = this.makeQuestionButton();\r\n      let omittedButton = this.makeToggleButtonWithTooltip(\r\n        <SvgIcon><Icon icon={circleOutline}/></SvgIcon>, \r\n        'omitted');\r\n      let superfluousButton = this.makeToggleButtonWithTooltip(\r\n        <SvgIcon><Icon icon={circleOffOutline}/></SvgIcon>, \r\n        'superfluous');\r\n      let breakButton = this.makeToggleButtonWithTooltip(\r\n        <SvgIcon><Icon icon={codeBrackets}/></SvgIcon>, \r\n        'break');\r\n      return [\r\n        ...this.makeTypeBotton(),\r\n        GDLButton,\r\n        referenceButton,\r\n        modifierButton,\r\n        variantButton,\r\n        questionButton,\r\n        exclamationButton,\r\n        damageButton,\r\n        breakButton,\r\n        omittedButton,\r\n        superfluousButton,\r\n      ];\r\n    };\r\n    \r\n    makeZoomButton = () => {\r\n        //\r\n        let { zoom } = this.props;\r\n        let zoomButton = this.makeToggleButtonWithTooltip(`${this.props.zoom}%`, 'Zoom', 'zoom');\r\n        let zoomSlider = (\r\n          <Slider\r\n            value={zoom}\r\n            onChange={(event, newValue) => {this.props.changeZoom({zoom: newValue})}}\r\n            aria-labelledby=\"editor-zoom-slider\"\r\n            valueLabelDisplay=\"auto\"\r\n            style={{width: '100px'}}\r\n            step={50}\r\n            marks\r\n            min={50}\r\n            max={300}\r\n          />\r\n        );\r\n        let zoomButtonPopper = this.makePopper( zoomSlider, 'zoom' );\r\n        return [zoomButton, zoomButtonPopper];\r\n    };\r\n    \r\n    renderEditorPanelContent = () => {\r\n        //\r\n/*         let languageButton = this.makeToggleButtonWithTooltip(\r\n          <SvgIcon><Icon icon={alphaLBoxOutline}/></SvgIcon>, \r\n          'language(s)');\r\n        let scriptButton = this.makeToggleButtonWithTooltip(\r\n          <SvgIcon><Icon icon={abjadHebrew}/></SvgIcon>, \r\n          'script(s)');\r\n        let genreButton = this.makeToggleButtonWithTooltip(\r\n          <SvgIcon><Icon icon={bookshelfIcon}/></SvgIcon>, \r\n          'genre(s)'); */\r\n        let descriptionButton = this.makeToggleButtonWithTooltip(\r\n          <SvgIcon><Icon icon={cardBulletedOutline }/></SvgIcon>, \r\n          'description');\r\n\r\n        let removeButton = this.makeToggleButtonWithTooltip(\r\n          <SvgIcon><Icon icon={eraserIcon}/></SvgIcon>, \r\n          'remove');\r\n        \r\n        let DIV = <Divider flexItem orientation=\"vertical\"/>;\r\n        \r\n        let buttonArray = [\r\n/*            languageButton,\r\n              scriptButton,\r\n              genreButton, */\r\n              ...this.makeZoomButton(),\r\n              descriptionButton,\r\n              DIV,\r\n              ...this.makeChrButtons(),\r\n              DIV,\r\n              ...this.makeAddButtons(),\r\n              DIV,\r\n              removeButton,\r\n        ];\r\n        \r\n        let formControlStyle = {\r\n            paddingTop: '6px',\r\n            position: 'fixed',\r\n            display: 'flex',\r\n            marginLeft: '50px',\r\n        };\r\n        \r\n        return this.makeToggleButtonGroup(\r\n            buttonArray, \r\n            'horizontal',\r\n            formControlStyle\r\n        );\r\n    };\r\n    \r\n    render(){\r\n        // \r\n        return this.renderEditorPanelContent()\r\n    }\r\n\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  //console.log( 'redux state:', state )\r\n  return {\r\n      cursor: state.editor.cursor,\r\n      zoom: state.editor.zoom,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n  selectActions,\r\n  setCursor,\r\n  activate,\r\n  modify,\r\n  add,\r\n  remove,\r\n  undo,\r\n  redo,\r\n  changeZoom,\r\n};\r\n\r\nexport const Panel = connect(mapStateToProps, mapDispatchToProps)(_Panel)","C:\\users\\eli\\desktop\\programmatical\\cuneiform_and_ane\\cuneiform_processing\\uqnu\\uqnu\\src\\app\\store.js",[],"C:\\users\\eli\\desktop\\programmatical\\cuneiform_and_ane\\cuneiform_processing\\uqnu\\uqnu\\src\\features\\loader\\uploader.js",["410","411","412","413","414","415","416","417","418","419"],"import React from 'react';\r\nimport * as C from 'jtf-lib';\r\nimport * as R from './atfRender';\r\nimport {stream, ATFActions2Map} from './streamATF';\r\nimport JSZip from 'jszip';\r\nimport LoaderAppBar from './appBar';\r\nimport ScrollableTabsButtonAuto from './fileTabs';\r\nimport { ReactVirtualizedTable as RVT } from './virtualizedTable';\r\nimport Dropzone from 'react-dropzone-uploader';\r\nimport { ILayoutProps as dropzoneLayout } from 'react-dropzone-uploader';\r\n\r\nimport 'react-dropzone-uploader/dist/styles.css';\r\nimport './App.Loader.css';\r\n\r\nimport { ATFTextEditor } from './textEditor';\r\nimport {Grid, Drawer, IconButton, Paper, Tooltip, Zoom} from '@material-ui/core';\r\n\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport AccountTreeIcon from '@material-ui/icons/AccountTree';\r\n\r\nimport ChromeReaderModeOutlinedIcon from '@material-ui/icons/ChromeReaderModeOutlined';\r\n\r\nimport { Editor } from '../editor/Editor';\r\nimport { connect } from 'react-redux';\r\n\r\nimport { Panel } from '../editor/editorPanel';\r\n\r\nimport {\r\n  load,\r\n  loadAsync,\r\n  activate,\r\n  modify,\r\n  add,\r\n  remove,\r\n  undo,\r\n  redo,\r\n} from '../editor/editorSlice';\r\n\r\nimport {\r\n  updateDataMap,\r\n  loadJTFStart,\r\n  loadJTFCompleted,\r\n  openDropzoneDrawer,\r\n  closeDropzoneDrawer,\r\n  handleDropzoneChangeStatus,\r\n  switchFileTab,\r\n  selectTextRow,\r\n  editText,\r\n  saveEdit2File,\r\n  download,\r\n  downloadFile,\r\n  downloadAllFiles,\r\n  downloadCurrent,\r\n} from './loaderSlice';\r\n\r\nimport localforage from 'localforage';\r\n\r\n// global loading variables\r\nlet dataPromiseAtIndex = {};\r\nlet dataActiveKeys = [];\r\nlet dataLoaderTimeouts = {};\r\n\r\nconst resetLoading = ( ) =>\r\n    // reset global loading variables.\r\n    dataPromiseAtIndex = {};\r\n    dataLoaderTimeouts = {};\r\n\r\nconst asyncLoad = ( keys ) => {\r\n    //\r\n    keys = keys.filter( k => dataPromiseAtIndex[k] );\r\n    if (keys.length===0){ return; }\r\n    let k = keys.shift();\r\n    let pr = dataPromiseAtIndex[k];\r\n    Promise.resolve(pr.promiseFunct()).then( \r\n        result => {\r\n            pr.thenFunct( result );\r\n            asyncLoad( keys );\r\n    });\r\n};\r\n\r\nclass _ATFUploader extends React.Component {\r\n    // React component for uploading and checking ATF files.\r\n    constructor(props) {\r\n        super(props);\r\n        this.tableRef = React.createRef()\r\n        this.state = {\r\n            ATF_file_maps: [],\r\n            edit: null,\r\n            dropzoneDrawerOpen: false,\r\n            mode: 'ATF',\r\n            zoom: 100,\r\n        };\r\n        localforage.getItem('ATF_file_maps').then( ATF_file_maps => {\r\n            if (ATF_file_maps){\r\n                this.setState({\r\n                    ATF_file_maps: ATF_file_maps.map( m => ATFActions2Map(m) )\r\n                })\r\n            };\r\n        })\r\n    };\r\n    \r\n    componentDidUpdate( prevProps ){\r\n        //\r\n        if (this.props.loader.loadJTF===true){\r\n            this.updateJTFStore();\r\n        };\r\n    };\r\n    \r\n    ATFMappingTracker = ( ChunkObj, linestream ) => {\r\n        // \r\n        // ToDo: replace this with progress bar functionality\r\n        // IMPORTANT: avarage CDLI AFT text size is 647.4 bytes\r\n    };\r\n    \r\n    updateJTFStore( ){\r\n        // Use to update redux store & local state\r\n        // upon change of active JTF to pass to editor.\r\n        let { fileDataMap, activeFileTab, activeTextRow } = this.props.loader;\r\n        let key = `${activeFileTab}_${activeTextRow}`;\r\n        if ( fileDataMap[key] ){\r\n            let JTF = fileDataMap[key].JTF;\r\n            this.props.load( JTF );\r\n            this.props.loadJTFCompleted();\r\n        };\r\n    };\r\n    \r\n    onFileStreamEnd = ( index, ATFMap ) => {\r\n        // Fires every time a file mapping is complete\r\n        let { ATF_file_maps } = this.state;\r\n        if (index!==null){\r\n            ATF_file_maps[index] = ATFMap;\r\n        } else {\r\n            ATF_file_maps.push(ATFMap);\r\n        };\r\n        this.setState({ATF_file_maps: ATF_file_maps})\r\n        localforage.setItem(\r\n            'ATF_file_maps', \r\n            [...ATF_file_maps].map( m => {\r\n                return { \r\n                    file: m.file, \r\n                    fileTextsMap: m.fileTextsMap, \r\n                    textsCount: m.textsCount\r\n                };\r\n            })\r\n        );\r\n        this.closeDropzoneDrawer();\r\n    };\r\n    \r\n    onAddButtonClick = () => {\r\n        // Fires when Add AppBar button is clicked.\r\n        this.setState({\r\n            dropzoneDrawerOpen: true\r\n        });\r\n    };\r\n    \r\n    closeDropzoneDrawer = () => {\r\n        // Call to close DropzoneDrawer.\r\n        if (this.state.dropzoneDrawerOpen){\r\n            this.setState({\r\n                dropzoneDrawerOpen: false\r\n            });\r\n        };\r\n    };\r\n    \r\n    onFileTabSwitch = ( tabIndex ) => {\r\n        // Fires when a fileTab is switched.\r\n        let { activeFileTab } = this.props.loader;\r\n        if (tabIndex!==activeFileTab){\r\n            resetLoading();\r\n            dataActiveKeys = dataActiveKeys.map( k => `${tabIndex}_${k.split('_')[1]}` );\r\n            this.props.switchFileTab( { tab: tabIndex } );\r\n        };\r\n    };\r\n    \r\n    onTextRowSelect = ( response ) => {\r\n        // Fires when a text row in virtualizedTable is selected.\r\n        let { activeTextRow } = this.props.loader;\r\n        let row = response.index;\r\n        if (activeTextRow!==row){\r\n            this.props.selectTextRow({ row: row });\r\n        };\r\n    };\r\n    \r\n    onTextEdit = ( newValue, oldValue ) => {\r\n        // Fires when a text is edited\r\n        this.setState({\r\n            edit: newValue,\r\n        });\r\n        let { activeFileTab, activeTextRow } = this.props.loader;\r\n        let key = `${activeFileTab}_${activeTextRow}`;\r\n        let data = JSON.parse(JSON.stringify(this.getCurrentData()));\r\n        let JTF = C.ATF2JTF( newValue );\r\n        JTF.reference = data.JTF.reference;\r\n        data.errors = JTF.errors;\r\n        data.warnings = JTF.warnings;\r\n        data.JTF = JTF;\r\n        this.props.updateDataMap({ data: data, key: key });\r\n        this.props.loadJTFStart();\r\n    };\r\n    \r\n    saveEdit2File = () => {\r\n        // Update file blob with changes from text editor\r\n        // and newly map it.\r\n        let { ATF_file_maps, edit } = this.state;\r\n        let { activeFileTab, activeTextRow } = this.props.loader;\r\n        let ATFMap = ATF_file_maps[activeFileTab];\r\n        Promise.resolve(ATFMap.actions.rewriteAtIndex(\r\n            activeTextRow,\r\n            this.props.editor.JTF.atf,\r\n            this.ATFMappingTracker,\r\n            this.onFileStreamEnd.bind(this, activeFileTab),\r\n        ));\r\n    };\r\n    \r\n    download = ( blob, name ) => {\r\n        // Downloader function.\r\n        let fileURL = window.URL.createObjectURL(blob);\r\n        let tempLink = document.createElement('a');\r\n        tempLink.href = fileURL;\r\n        tempLink.setAttribute('download', name);\r\n        tempLink.click();\r\n    };\r\n    \r\n    downloadFile = () => {\r\n        // Download active file.\r\n        let { ATF_file_maps } = this.state;\r\n        let { activeFileTab } = this.props.loader;\r\n        let ATFMap = ATF_file_maps[activeFileTab];\r\n        this.download(ATFMap.file, ATFMap.file.name);\r\n    };\r\n    \r\n    downloadAllFiles = () => {\r\n        // Download all loaded files.\r\n        let {ATF_file_maps} = this.state;\r\n        let {download} = this;\r\n        let zip = new JSZip();\r\n        ATF_file_maps.forEach( ATFMap => {\r\n            zip.file(`ATFcollection/${ATFMap.file.name}`, ATFMap.file);\r\n        });\r\n        zip.generateAsync({type:\"blob\"})\r\n        .then(function (blob) {\r\n            download(blob, \"ATFcollection.zip\");\r\n        });\r\n    };\r\n\r\n    downloadCurrent = () => {\r\n        // Downdload active text.\r\n        // Note that editor changes have to be saved in order to apply.\r\n        let { JTF } = this.props.editor;\r\n        let name = `${JTF.meta.p_number}.atf`;\r\n        let file = new File([JTF.atf], name, {type: 'text/plain',});\r\n        this.download(file, name);\r\n    };\r\n    \r\n    handleDropzoneChangeStatus = ({ meta, file }, status) => {\r\n        // called every time a file's `status` changes.\r\n        if (status==='done'){\r\n            // stream file to map it\r\n            // this.onFileStreamEnd fires when done\r\n            Promise.resolve(file).then((file) => {\r\n                stream(\r\n                    file,\r\n                    this.ATFMappingTracker,\r\n                    this.onFileStreamEnd.bind(this,null),\r\n                );\r\n            });\r\n        };\r\n    };\r\n    \r\n    onRowsRendered( rowsData ){\r\n        //\r\n        let { activeFileTab, fileDataMap } = this.props.loader;\r\n        let i = rowsData.overscanStartIndex;\r\n        let keys = [];\r\n        while (i < rowsData.overscanStopIndex+1){\r\n            keys.push( `${activeFileTab}_${i}` )\r\n            i++\r\n        };\r\n        Object.keys(dataPromiseAtIndex).forEach( k => {\r\n            if ( !keys.includes(k) ){\r\n                delete dataPromiseAtIndex[k]\r\n            }\r\n        });\r\n        keys.forEach( k => {\r\n            if (!fileDataMap[k] && !dataPromiseAtIndex[k]){\r\n                //console.log( 'key test', k.split('_')[1], k )\r\n                let index = parseInt(k.split('_')[1])\r\n                dataPromiseAtIndex[k] = this.loadDataAtIndex( index, k );\r\n                //console.log( 'key test data', k, dataPromiseAtIndex[k] )\r\n            };\r\n        })\r\n        dataActiveKeys = keys;\r\n        asyncLoad( keys );\r\n    };\r\n    \r\n    rowGetterFunction = ( index ) => {\r\n        // turn ATF table index into row data;\r\n        index = index.index;\r\n        let { activeFileTab, fileDataMap } = this.props.loader;\r\n        let k = `${activeFileTab}_${index}`;\r\n        //console.log(dataActiveKeys, k, dataActiveKeys.includes(k))\r\n        if (dataActiveKeys.includes(k) && !fileDataMap[k] && !dataPromiseAtIndex[k]){\r\n            dataPromiseAtIndex[k] = this.loadDataAtIndex( index, k );\r\n            asyncLoad( [k] );\r\n        };\r\n        return {\r\n            row: index,\r\n        };\r\n    };\r\n    \r\n    loadDataAtIndex( index, key ){\r\n        //\r\n        let { ATF_file_maps } = this.state;\r\n        let { activeFileTab, activeTextRow } = this.props.loader;\r\n        let { ATFAtIndex } = ATF_file_maps[activeFileTab].actions;\r\n        let filename = ATF_file_maps[activeFileTab].file.name;\r\n        \r\n        const resolveP = ( rawATFobj ) => {\r\n            delete dataPromiseAtIndex[key];\r\n            let { errors, warnings, success } = rawATFobj.JTFResponse;\r\n            let valid = (!success || errors.length>0) \r\n                ? false \r\n                : (warnings.length>0) ? undefined : true;\r\n            let data = {\r\n                index: index+1,\r\n                file: filename,\r\n                PNumber: rawATFobj.PNumber,\r\n                valid: valid,\r\n                errors: errors,\r\n                warnings: warnings,\r\n                JTF: rawATFobj.JTFResponse,\r\n            };\r\n            this.props.updateDataMap({ data: data, key: key });\r\n            if (activeTextRow===index){\r\n                this.updateJTFStore( );\r\n            };\r\n        };\r\n        \r\n        return {\r\n            promiseFunct: ATFAtIndex.bind( this, index ),\r\n            thenFunct: resolveP.bind( this ),\r\n        };\r\n    };\r\n    \r\n    countAllRowsCollection(){\r\n        //\r\n        // Count ATF texts in all uploaded files.\r\n        // If desired, the loader can handle all files \r\n        // in a single table. For that, use:\r\n        // ´rowCount = {this.countAllRowsCollection()}´\r\n        //\r\n        let { ATF_file_maps } = this.state;\r\n        if (ATF_file_maps.length===0){\r\n            return 0;\r\n        };\r\n        let counter = 0;\r\n        ATF_file_maps.forEach(function(ATFMap){\r\n            counter+=ATFMap.textsCount;\r\n        });\r\n        return counter;\r\n    };\r\n    \r\n    countRowsActiveFileTab = () => {\r\n        // count rows at active filetab, if found\r\n        let { ATF_file_maps } = this.state;\r\n        let { activeFileTab, activeTextRow } = this.props.loader;\r\n        if (ATF_file_maps.length===0){\r\n            return 0;\r\n        }\r\n        return ATF_file_maps[activeFileTab].textsCount\r\n    };\r\n    \r\n    getCurrentData = ( ) => {\r\n        // get data from loader store for current tab and row.\r\n        let { fileDataMap, activeFileTab, activeTextRow } = this.props.loader;\r\n        let key = `${activeFileTab}_${activeTextRow}`;\r\n        return (fileDataMap[key]) ? fileDataMap[key] : null;\r\n    };\r\n    \r\n    ATFMaps2Tabs = ( ) => {\r\n        // convert ATFMaps to tabs array\r\n        let { ATF_file_maps } = this.state;\r\n        return ATF_file_maps.map( ATFMap => {\r\n            return {\r\n                label: ATFMap.file.name,\r\n                content: (<div>content</div>)\r\n            }\r\n        })\r\n    };\r\n    \r\n    renderDropzone = () => {\r\n        // Define Dropzone Component.\r\n        return (\r\n            <Dropzone\r\n                onChangeStatus = {this.handleDropzoneChangeStatus}\r\n                accept = \".atf, .txt\"\r\n                PreviewComponent = {null}\r\n                LayoutComponent = {dropzoneLayout}\r\n                callback = {this.props.parentCallback}\r\n                output = {this.props.output}\r\n                maxFiles = {50}\r\n            />\r\n        );\r\n    };\r\n    \r\n    renderDropzoneDrawer = () => {\r\n        // \r\n        let {dropzoneDrawerOpen} = this.state;\r\n        let closeButton = (\r\n            <IconButton\r\n                aria-label=\"close\"\r\n                onClick={this.closeDropzoneDrawer}\r\n                color=\"inherit\"\r\n                edge='end'\r\n                style={{\r\n                    float: 'right'\r\n                }}\r\n            >\r\n                <CloseIcon />\r\n            </IconButton>\r\n        );\r\n        return (\r\n            <Drawer anchor='top' open={dropzoneDrawerOpen}>\r\n                <Grid item xs={11}>\r\n                    {closeButton}\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                    {this.renderDropzone()}\r\n                </Grid>\r\n            </Drawer>\r\n        );\r\n    };\r\n    \r\n    renderFileTabs = () => {\r\n        // Define FileTabs component.\r\n        let tabs = this.ATFMaps2Tabs();\r\n        return (\r\n            <ScrollableTabsButtonAuto\r\n                tabGetter={this.ATFMaps2Tabs.bind(this)}\r\n                handleChangeCallback={this.onFileTabSwitch}\r\n                tabs={tabs}\r\n            />\r\n        );\r\n    };\r\n    \r\n    renderVirtualTable = (allCollection=false) => {\r\n        // Define React Virtual Table Component.\r\n        // Use `allCollection=true` to put all files'\r\n        // data in single tablet.\r\n        let { activeTextRow } = this.props.loader;\r\n        let rowCount = (allCollection)\r\n            ? this.countAllRowsCollection()\r\n            : this.countRowsActiveFileTab()\r\n        return (\r\n            <RVT\r\n                rowGetter={this.rowGetterFunction.bind(this)}\r\n                rowCount={rowCount}\r\n                selectRowCallback={this.onTextRowSelect.bind(this)}\r\n                activeTextRow={activeTextRow}\r\n                onRowsRendered={this.onRowsRendered.bind(this)}\r\n            />\r\n        );\r\n    };\r\n    \r\n    renderTooltip( title, children ){\r\n        // Tooltip wrapper.\r\n        return <Tooltip title={title}>{children}</Tooltip>\r\n    };\r\n    \r\n    renderSwitchButton = () => {\r\n        // Button to switch between editor modes.\r\n        let { mode } = this.state;\r\n        let switchMode = () => {\r\n            this.setState({mode: (mode==='ATF') ? 'JTF' : 'ATF'})\r\n        };\r\n        let switchButton = (mode==='JTF') \r\n            ? <AccountTreeIcon\r\n                id='switchMode'\r\n                onClick={switchMode}\r\n                />\r\n            : <ChromeReaderModeOutlinedIcon\r\n                id='switchMode'\r\n                onClick={switchMode}\r\n                />;\r\n        let tooltipTitle = (mode==='ATF') ? 'formatted' : 'ATF' ;\r\n        return this.renderTooltip(`switch to ${tooltipTitle} view`, switchButton);\r\n    };\r\n    \r\n    renderEditorPanel = () => {\r\n        // \r\n        let buttons = [this.renderSwitchButton()]\r\n        return (\r\n            <Paper\r\n                elevation={0}\r\n                id='editorPanel'\r\n            >\r\n            { buttons }\r\n            { <Panel renderTooltip={this.renderTooltip.bind(this)}/> }\r\n            </Paper>\r\n        );\r\n    };\r\n    \r\n    renderEditor = () => {\r\n        // \r\n        let { mode } = this.state;\r\n        let editorComponent = (mode==='ATF') \r\n            ? this.renderATFTextEditor()\r\n            : (mode==='JTF') \r\n            ? this.renderUqNUEditor()\r\n            : '';\r\n        return (\r\n        <Zoom in={true} style={{transitionDelay: '500ms'}}>\r\n            <Paper \r\n                id='editorContainer'\r\n                className={mode}\r\n            >\r\n            {editorComponent}\r\n            </Paper>\r\n        </Zoom>\r\n      );\r\n    };\r\n    \r\n    renderUqNUEditor = () => {\r\n        // JTF structure view.\r\n        return (\r\n            <Editor\r\n            />\r\n        );\r\n    };\r\n    \r\n    renderATFTextEditor = ( ) => {\r\n        // ATFTextEditor ACE Component view.\r\n        let { edit } = this.state;\r\n        let { activeTextRow } = this.props.loader;\r\n        let data = this.getCurrentData();\r\n        //let content = (edit) ? edit : (data && data.JTF) ? data.JTF.atf : '';\r\n        //{/*content={content}*/}\r\n        return (\r\n        <ATFTextEditor\r\n          index={activeTextRow}\r\n          data={data}\r\n          onChange={this.onTextEdit.bind(this)}\r\n          edit={edit}\r\n          save2file={this.saveEdit2File.bind(this)}\r\n        />)\r\n    };\r\n    \r\n    renderAppBar = () => {\r\n        //\r\n        let {ATF_file_maps} = this.state;\r\n        return (\r\n            <LoaderAppBar\r\n                downloadFile={this.downloadFile.bind(this)}\r\n                downloadAllFiles={\r\n                    (ATF_file_maps.length>1) \r\n                    ? this.downloadAllFiles.bind(this) : null\r\n                }\r\n                downloadCurrent={this.downloadCurrent.bind(this)}\r\n                onAddButtonClick={this.onAddButtonClick.bind(this)}\r\n            />\r\n        );\r\n    };\r\n    \r\n    renderAnalytics = () => {\r\n        //\r\n        return (<>\r\n            <script src=\"/__/firebase/7.14.1/firebase-app.js\"></script>\r\n            <script src=\"/__/firebase/7.14.1/firebase-analytics.js\"></script>\r\n            <script src=\"/__/firebase/init.js\"></script>\r\n        </>)\r\n    };\r\n    \r\n    renderAll = ( gridStyle ) => {\r\n        // Render loaded texts.\r\n        let view = (\r\n            <Grid container \r\n                spacing={1} \r\n                style={gridStyle}\r\n                alignItems='stretch'\r\n                justify='flex-start'\r\n            >    \r\n                <Grid item xs={12} style={{paddingBottom: `50px`}}>\r\n                    {this.renderAppBar()}\r\n                </Grid>\r\n                <Grid container item xs={12}>\r\n                    {this.renderDropzoneDrawer()}\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                    {this.renderFileTabs()}\r\n                </Grid>\r\n                <Grid item xs={4} \r\n                    style={{\r\n                        maxWidth: `250px`,\r\n                        height: `100%`,\r\n                        }}\r\n                >\r\n                    {this.renderVirtualTable()}\r\n                </Grid>\r\n                <Grid item xs={8} \r\n                    style={{\r\n                        flexBasis: `calc(100% - 250px)`,\r\n                        maxWidth: `100%`,\r\n                        height: `100%`,\r\n                        }}\r\n                >   \r\n                    {this.renderEditorPanel( )}\r\n                    {this.renderEditor( )}\r\n                </Grid>\r\n            </Grid>\r\n        );\r\n        return view;\r\n    };\r\n    \r\n    render(){\r\n        //\r\n        let gridStyle = {\r\n            margin: 0,\r\n            flexGrow: 0,\r\n            maxWidth: `100%`,\r\n            flexBasis: `100%`,\r\n        };\r\n        return (\r\n            <>\r\n                {this.renderAll(gridStyle)}\r\n                {this.renderAnalytics()}\r\n            </>\r\n        );\r\n    };\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n    //console.log( 'redux state:', state )\r\n    return state;\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n    load,\r\n    loadAsync,\r\n    updateDataMap,\r\n    loadJTFStart,\r\n    loadJTFCompleted,\r\n    openDropzoneDrawer,\r\n    closeDropzoneDrawer,\r\n    handleDropzoneChangeStatus,\r\n    switchFileTab,\r\n    selectTextRow,\r\n    editText,\r\n    saveEdit2File,\r\n    download,\r\n    downloadFile,\r\n    downloadAllFiles,\r\n    downloadCurrent,\r\n};\r\n\r\nexport const ATFUploader = connect(mapStateToProps, mapDispatchToProps)(_ATFUploader)","C:\\users\\eli\\desktop\\programmatical\\cuneiform_and_ane\\cuneiform_processing\\uqnu\\uqnu\\src\\features\\loader\\streamATF.js",["420","421","422","423","424","425"],"C:\\users\\eli\\desktop\\programmatical\\cuneiform_and_ane\\cuneiform_processing\\uqnu\\uqnu\\src\\features\\loader\\virtualizedTable.js",["426","427","428","429","430"],"import React from 'react';\r\n\r\nimport PropTypes from 'prop-types';\r\nimport clsx from 'clsx';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport { TableCell, Paper, Zoom } from '@material-ui/core';\r\nimport { AutoSizer, Column, Table } from 'react-virtualized';\r\n\r\nimport DoneIcon from '@material-ui/icons/Done';\r\nimport WarningIcon from '@material-ui/icons/Warning';\r\nimport ErrorOutlineIcon from '@material-ui/icons/ErrorOutline';\r\n\r\nimport { connect } from 'react-redux';\r\n\r\n//import tableIcons from './fileTableIcons';\r\n\r\nconst styles = theme => ({\r\n    flexContainer: {\r\n        display: 'flex',\r\n        alignItems: 'left',\r\n        boxSizing: 'border-box',\r\n    },\r\n    table: {\r\n        // temporary right-to-left patch, waiting for\r\n        // https://github.com/bvaughn/react-virtualized/issues/454\r\n        '& .ReactVirtualized__Table__headerRow': {\r\n            flip: false,\r\n            paddingRight: theme.direction === 'rtl' ? '0px !important' : undefined,\r\n        },\r\n    },\r\n    tableRow: {\r\n        cursor: 'pointer',\r\n    },\r\n    tableRowHover: {\r\n        '&:hover': {\r\n            backgroundColor: theme.palette.grey[200],\r\n        }, \r\n    },\r\n    tableCell: {\r\n        flex: 1,\r\n    },\r\n    noClick: {\r\n        cursor: 'initial',\r\n    },\r\n});\r\n\r\nconst splitAt = index => x => [x.slice(0, index), x[index], x.slice(index+1)]\r\n\r\n/*\r\nTODOs:\r\n    - errors and warnings proper display (aggregation of similar?)\r\n    - ! splitAt error (text no. ~666 in big file )\r\n    - implement text editor for ATF chunks?\r\n*/\r\n\r\nconst makeHighlight = (highlight) => {\r\n    //\r\n    return (\r\n        <span style={{color: 'red', fontWeight: 600}}>\r\n            {highlight}\r\n        </span>\r\n    );\r\n};\r\n\r\nconst listErrors = (errors) => {\r\n    // make jsx errors list.\r\n    return errors.map(function(e, i){\r\n        //console.log(e)\r\n        let [begin, highlight, end] = splitAt(e.column-1)(e.string)\r\n        highlight = makeHighlight(highlight);\r\n        return (\r\n            <div key={i}>\r\n                {e.agent+\" / \"+e.type+\" at \"+e.line+\":\"+e.column}\r\n                <br/>\r\n                <span style={{fontFamily: 'monospace'}}>\r\n                    {begin}\r\n                    {highlight}\r\n                    {end}\r\n                </span>\r\n            </div>\r\n        );\r\n    });\r\n};\r\n\r\nconst listWarnings = (warnings) => {\r\n    // make jsx warnings list.\r\n    return warnings.map(function(w, i){\r\n        let clss = ''\r\n        if (w.object){\r\n            clss = (w.object._class) ? w.object._class+': ' :\r\n                (w.object.type) ? w.object.type+': ' : \r\n                '';\r\n            };\r\n        return (\r\n            <div key={i}>\r\n                {w.agent+\": \"+w.type+' ('+clss+w.action+')'}\r\n            </div>\r\n        );\r\n    });\r\n};\r\n\r\nclass _ATFCellRenderer extends React.PureComponent {\r\n    \r\n    constructor(props) {\r\n        super(props);\r\n    };\r\n    \r\n    makeCellData( ){\r\n        //\r\n        let { dataKey } = this.props;\r\n        let { row } = this.props.rowData;\r\n        if (dataKey==='index'){ return row+1 }\r\n        let { activeFileTab, fileDataMap } = this.props.loader;\r\n        let key = `${activeFileTab}_${row}`;\r\n        if ( !fileDataMap[key] ){ \r\n            return '...';\r\n        };\r\n        let cellData = fileDataMap[key][dataKey];\r\n        if (dataKey === \"valid\"){\r\n            cellData = \r\n                (cellData===true) ? <DoneIcon color={'primary'}/> : \r\n                (cellData===undefined) ? <WarningIcon color={'disabled'}/> : \r\n                <ErrorOutlineIcon color={'error'}/>;\r\n        };\r\n        return cellData;\r\n    };\r\n    \r\n    render(){\r\n        //\r\n        const { \r\n            columns, rowData, dataKey, classes, onRowClick, columnIndex, activeTextRow, rowHeight\r\n        } = this.props;\r\n        let cellData = this.makeCellData( );\r\n        const isSelected = (activeTextRow===rowData.row);\r\n        let selectedStyle = (isSelected) ? {backgroundColor: '#ccccf2'} : {};\r\n        return (\r\n            <TableCell\r\n                component=\"div\"\r\n                className={clsx(classes.tableCell, classes.flexContainer, {\r\n                    [classes.noClick]: onRowClick == null,\r\n                })}\r\n                variant=\"body\"\r\n                style={{ height: rowHeight, ...selectedStyle}}\r\n                align={\r\n                    (columnIndex != null && columns[columnIndex].numeric) || false \r\n                        ? 'right' : 'left'\r\n                    }\r\n            >\r\n                {cellData}\r\n            </TableCell>\r\n        );\r\n    };\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n    //console.log( 'redux state:', state )\r\n    return state;\r\n};\r\n\r\nconst ATFCellRenderer = connect(mapStateToProps)(_ATFCellRenderer)\r\n\r\nclass MuiVirtualizedTable extends React.PureComponent {\r\n    \r\n    static defaultProps = {\r\n        headerHeight: 48,\r\n        rowHeight: 55,\r\n    };\r\n\r\n    getRowClassName = ({ index }) => {\r\n        //\r\n        const { classes, onRowClick } = this.props;\r\n        return clsx(classes.tableRow, classes.flexContainer, {\r\n            [classes.tableRowHover]: index !== -1 && onRowClick != null,\r\n        });\r\n    };\r\n\r\n    cellRenderer = ({ rowData, dataKey, columnIndex }) => {\r\n        //\r\n        let cellData = '...'; //placeholder to have before promise (rowData) renders\r\n        return (\r\n            <ATFCellRenderer\r\n                cellData={cellData}\r\n                rowData={rowData}\r\n                dataKey={dataKey}\r\n                columnIndex={columnIndex}\r\n                {...this.props}\r\n            />\r\n        )\r\n    };\r\n\r\n    headerRenderer = ({ label, columnIndex }) => {\r\n        //\r\n        const { headerHeight, columns, classes } = this.props;\r\n        return (\r\n            <TableCell\r\n                component=\"div\"\r\n                className={clsx(classes.tableCell, classes.flexContainer, classes.noClick)}\r\n                variant=\"head\"\r\n                style={{ height: headerHeight }}\r\n                align={columns[columnIndex].numeric || false ? 'right' : 'left'}\r\n            >\r\n                <span>{label}</span>\r\n            </TableCell>\r\n        );\r\n    };\r\n    \r\n    selectRow = ( response ) => {\r\n        this.props.selectRowCallback(response);\r\n    };\r\n\r\n    render() {\r\n        const { classes, columns, rowHeight, headerHeight, ...tableProps } = this.props;\r\n        return (\r\n            <AutoSizer>\r\n                {({ height, width }) => (\r\n                    <Table\r\n                        height={height}\r\n                        width={width}\r\n                        rowHeight={rowHeight}\r\n                        gridStyle={{\r\n                            direction: 'inherit',\r\n                        }}\r\n                        headerHeight={headerHeight}\r\n                        className={classes.table}\r\n                        {...tableProps}\r\n                        rowClassName={this.getRowClassName}\r\n                        onRowClick={this.selectRow}\r\n                    >\r\n                        {columns.map(({ dataKey, ...other }, index) => {\r\n                            return (\r\n                                <Column\r\n                                    key={dataKey}\r\n                                    headerRenderer={headerProps =>\r\n                                        this.headerRenderer({\r\n                                            ...headerProps,\r\n                                            columnIndex: index,\r\n                                        })\r\n                                    }\r\n                                    className={classes.flexContainer}\r\n                                    cellRenderer={this.cellRenderer}\r\n                                    dataKey={dataKey}\r\n                                    {...other}\r\n                                />\r\n                            );\r\n                        })}\r\n                    </Table>\r\n                )}\r\n            </AutoSizer>\r\n        );\r\n    }\r\n}\r\n\r\nMuiVirtualizedTable.propTypes = {\r\n    classes: PropTypes.object.isRequired,\r\n    columns: PropTypes.arrayOf(\r\n        PropTypes.shape({\r\n            dataKey: PropTypes.string.isRequired,\r\n            label: PropTypes.string.isRequired,\r\n            numeric: PropTypes.bool,\r\n            width: PropTypes.number.isRequired,\r\n        }),\r\n    ).isRequired,\r\n    headerHeight: PropTypes.number,\r\n    onRowClick: PropTypes.func,\r\n    rowHeight: PropTypes.number,\r\n};\r\n\r\nconst VirtualizedTable = withStyles(styles)(MuiVirtualizedTable);\r\n\r\nconst columns = [\r\n    {\r\n        width: 70,\r\n        label: '',\r\n        dataKey: 'index',\r\n        numeric: true,\r\n    },\r\n    {\r\n        width: 100,\r\n        label: 'CDLI',\r\n        dataKey: 'PNumber',\r\n    },\r\n    {\r\n        width: 70,\r\n        label: 'Valid',\r\n        dataKey: 'valid',\r\n    },\r\n];\r\n\r\n\r\nexport class ReactVirtualizedTable extends React.Component {\r\n    //\r\n    constructor(props) {\r\n        super(props);\r\n    };\r\n    \r\n    render(){\r\n        let {rowCount, rowGetter, selectRowCallback, activeTextRow, onRowsRendered\r\n            } = this.props;\r\n        return (\r\n        <Zoom in={true} style={{transitionDelay: '500ms'}}>\r\n        <Paper style={{ height: `calc(100vh - 140px)`, width: '240px' }}>\r\n            <VirtualizedTable\r\n                rowCount={rowCount}\r\n                rowGetter={rowGetter}\r\n                onRowsRendered={onRowsRendered}\r\n                columns={columns}\r\n                selectRowCallback={selectRowCallback}\r\n                activeTextRow={activeTextRow}\r\n                overscanRowCount={3}\r\n            />\r\n        </Paper>\r\n        </Zoom>\r\n        );\r\n    };\r\n};\r\n","C:\\users\\eli\\desktop\\programmatical\\cuneiform_and_ane\\cuneiform_processing\\uqnu\\uqnu\\src\\services\\axios\\index.js",[],"C:\\users\\eli\\desktop\\programmatical\\cuneiform_and_ane\\cuneiform_processing\\uqnu\\uqnu\\src\\features\\loader\\loaderSlice.js",["431"],"C:\\users\\eli\\desktop\\programmatical\\cuneiform_and_ane\\cuneiform_processing\\uqnu\\uqnu\\src\\features\\loader\\fileTabs.js",["432","433"],["434","435"],"C:\\users\\eli\\desktop\\programmatical\\cuneiform_and_ane\\cuneiform_processing\\uqnu\\uqnu\\src\\features\\loader\\textEditor.js",["436","437","438","439","440","441","442","443","444","445","446","447"],"import React from \"react\";\r\nimport { render } from \"react-dom\";\r\nimport AceEditor from \"react-ace\";\r\n \r\nimport \"ace-builds/src-noconflict/mode-java\";\r\nimport \"ace-builds/src-noconflict/theme-github\";\r\n\r\nimport { IconButton, Tooltip, Fab, Paper } from '@material-ui/core';\r\nimport StarIcon from '@material-ui/icons/Star';\r\nimport StarBorderIcon from '@material-ui/icons/StarBorder';\r\nimport DoneIcon from '@material-ui/icons/Done';\r\nimport WarningIcon from '@material-ui/icons/Warning';\r\nimport ErrorOutlineIcon from '@material-ui/icons/ErrorOutline';\r\nimport SaveIcon from '@material-ui/icons/Save';\r\n\r\n// ToDo:\r\n// rewrite this with regard to Redux.\r\n// Esp. editing / saving functionality.\r\nimport { useSelector, useDispatch, connect, mapDispatchToProp } from 'react-redux';\r\n\r\nclass _ATFTextEditor extends React.Component {\r\n    // React component for uploading and checking ATF files.\r\n    constructor(props) {\r\n        super(props);\r\n        //ToDo: \r\n        // * move state to redux store level.\r\n        this.state = {\r\n            editor: null,\r\n            undoManager: null,\r\n            modified: false, \r\n            parentCalls: [],\r\n            value: (props.JTF && props.JTF.atf) ? props.JTF.atf : '',\r\n            annotations: [],\r\n        };\r\n    };\r\n    \r\n    componentDidUpdate( oldProps, oldState ) {\r\n        //\r\n        let { props } = this;\r\n        let value = (props.JTF && props.JTF.atf) \r\n            ? props.JTF.atf : '';\r\n        let oldValue = (oldProps.JTF && oldProps.JTF.atf) \r\n            ? oldProps.JTF.atf : '';\r\n        if ( value!==oldValue ){\r\n            this.setState({ value: value, modified: false })\r\n        };\r\n    };\r\n    \r\n/*     componentDidUpdate( oldProps, oldProps ) {\r\n        // \r\n        const newProps = this.props;\r\n        if (!newProps.content){\r\n            return;\r\n        };\r\n        if (this.state.modified \r\n            && newProps.index===oldProps.index){\r\n            this.updateFromEdit(newProps.edit);\r\n        } else {\r\n            Promise.resolve(newProps.content.rawATFobj)\r\n            .then( rawATFObj => {\r\n                this.updateFromObj(rawATFObj)\r\n            })\r\n        };\r\n    }; */\r\n    \r\n    onEditorLoad = ( editor ) => {\r\n        // Add editor and undoManager to state on load.\r\n        //console.log('loading editor');\r\n        let session = editor.getSession();\r\n        let undoManager = session.getUndoManager();\r\n        this.setState({\r\n            editor: editor,\r\n            undoManager: undoManager,\r\n        });\r\n    };\r\n    \r\n    onChange = ( newValue ) => {\r\n        // Callback on change of content in editor\r\n        let { value, parentCalls } = this.state;\r\n        let { onChange } = this.props;\r\n        if (parentCalls.length>0){\r\n            parentCalls.forEach(c => {\r\n                clearTimeout(c)\r\n            });\r\n        };\r\n        \r\n        if ( onChange ){\r\n            let callParent = setTimeout(onChange.bind(this, newValue, value), 3000);\r\n            this.setState({\r\n                modified: true,\r\n                value: newValue,\r\n                parentCalls: [callParent]\r\n            });\r\n        };\r\n    };\r\n    \r\n    updateFromEdit = ( JTFResponse ) => {\r\n        // Update this.state.value & .annotations from JTFResponse.\r\n        if (!JTFResponse){\r\n            return;\r\n        };\r\n        //let value = JTFResponse.data;\r\n        let {annotations} = this.state; \r\n        let newAnnotations = this.makeAnnotations(JTFResponse);\r\n        if (JSON.stringify(annotations)!==JSON.stringify(newAnnotations)){\r\n            this.setState({annotations: newAnnotations})\r\n        };\r\n        //this.updateIfNew(value, annotations);\r\n    };\r\n    \r\n    /*\r\n    updateFromObj = ( rawATFObj )=> {\r\n        // Update this.state.value & .annotations from rawATFObj.\r\n        if (!rawATFObj){\r\n            return;\r\n        };\r\n        this.updateIfNew(rawATFObj);\r\n    };\r\n    \r\n    updateIfNew = (rawATFObj) => {\r\n        //\r\n        //console.log('updating new');\r\n        let value = rawATFObj.string;\r\n        //console.log(value, this.state.value, this.state.value!==value)\r\n        if (this.state.value!==value) {\r\n            let PNumber = rawATFObj.PNumber;\r\n            let {file, texts} = rawATFObj.map;\r\n            let {name, size, lastModifiedDate} = file;\r\n            let annotations = this.makeAnnotations(rawATFObj.JTFResponse);\r\n            this.setState({\r\n                PNumber: PNumber,\r\n                name: name,\r\n                size: size,\r\n                lastModifiedDate: lastModifiedDate,\r\n                texts: texts,\r\n                value: value,\r\n                annotations: annotations,\r\n                modified: false,\r\n            });\r\n            this.resetUndoManager();\r\n        };\r\n    };\r\n    */\r\n    \r\n    resetUndoManager = () => {\r\n        // Reset undoManager after loading new content.\r\n        let {undoManager, editor} = this.state;\r\n        if (undoManager){\r\n            undoManager.reset();\r\n            let session = editor.getSession();\r\n            session.setUndoManager(undoManager)\r\n        };\r\n    };\r\n    \r\n    listExpectedClasses = (nearlyHints) => {\r\n        // \r\n        let expectedTokens = [];\r\n        if (nearlyHints){\r\n            expectedTokens = [...new Set(\r\n                Object.entries(nearlyHints)\r\n                .map(([key, obj]) => obj.token)\r\n            )].sort();\r\n        };\r\n        return expectedTokens;\r\n    };\r\n    \r\n    makeAnnotations = (JTFResponse) => {\r\n        // \r\n        let { errors } = JTFResponse;\r\n        return errors.map( error => {\r\n            let {agent, type, string, tokenValue, tokenClass, nearlyHints\r\n                } = error;\r\n            let errorText = agent+' '+type+' error.'\r\n            if (tokenValue && tokenClass){\r\n                errorText+='\\nToken: \"'+tokenValue+'\".\\nClass: '+tokenClass+'.'\r\n            };\r\n            let expectedClasses = this.listExpectedClasses(nearlyHints);\r\n            if (expectedClasses.length>0){\r\n                errorText+='\\nExpected classes: '+expectedClasses.join(', ')+'.'\r\n            }\r\n            return { \r\n                row: error.line-1,\r\n                column: error.column,\r\n                type: 'error',\r\n                text: errorText,\r\n            }\r\n        });\r\n    };\r\n    \r\n    renderEditor = () => {\r\n        //\r\n        let { data } = this.props;\r\n        let { value } = this.state;\r\n        let annotations = (data && data.JTF ) ? this.makeAnnotations(data.JTF) : [] ;\r\n        return (\r\n            <AceEditor\r\n                mode=\"java\"\r\n                theme=\"github\"\r\n                onChange={this.onChange}\r\n                onLoad={this.onEditorLoad}\r\n                name=\"UNIQUE_ID_OF_DIV\"\r\n                editorProps={{ $blockScrolling: true }}\r\n                setOptions={{ useWorker: false }}\r\n                value={value}\r\n                annotations={annotations}\r\n                showPrintMargin={false}\r\n                style={{width: '100%', height: `calc(100vh - 190px)`}}\r\n            />\r\n        );\r\n    };\r\n    \r\n    renderFAB = () => {\r\n        // floating action button.\r\n        let {modified, annotations} = this.state;\r\n        let {edit, save2file} = this.props;\r\n        let disabled = (annotations.length!==0 || (!modified && !edit));\r\n        return (\r\n            <Fab \r\n                color=\"primary\"\r\n                disabled={disabled}\r\n                size='small'\r\n                style={{\r\n                    float: 'right',\r\n                    marginTop: '-70px',\r\n                    marginRight: '50px',\r\n                    }}\r\n            >\r\n                <SaveIcon onClick={save2file}/>\r\n            </Fab>\r\n        );\r\n    };\r\n\r\n    render(){\r\n        // \r\n        //console.log('rendering editor');\r\n        return(\r\n            <Paper\r\n            elevation={1}\r\n            >\r\n                {/*{this.renderPanel()}*/}\r\n                {this.renderEditor()}\r\n                {this.renderFAB()}\r\n            </Paper>\r\n        );\r\n    };\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  //console.log( 'redux state:', state )\r\n  return {JTF: state.editor.JTF};\r\n};\r\nconst mapDispatchToProps = {};\r\nexport const ATFTextEditor = connect(mapStateToProps, mapDispatchToProps)(_ATFTextEditor)","C:\\users\\eli\\desktop\\programmatical\\cuneiform_and_ane\\cuneiform_processing\\uqnu\\uqnu\\src\\index.js",[],"C:\\users\\eli\\desktop\\programmatical\\cuneiform_and_ane\\cuneiform_processing\\uqnu\\uqnu\\src\\features\\loader\\appBar.js",["448"],"import React from \"react\";\r\nimport {Grid, AppBar, Toolbar, Menu, MenuItem, Button, ClickAwayListener, Fade} from '@material-ui/core';\r\nimport {Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle} from '@material-ui/core';\r\nimport GetAppIcon from '@material-ui/icons/GetApp';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport InfoIcon from '@material-ui/icons/Info';\r\n\r\nlet gridStyle = {\r\n\tmargin: 0,\r\n\tflexGrow: 0,\r\n\tmaxWidth: `100%`,\r\n\tflexBasis: `100%`,\r\n};\r\n\r\nexport default class LoaderAppBar extends React.Component {\r\n\t// React component for uploading and checking ATF files.\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\tdowndloadMenuAnchor: null,\r\n\t\t\tdowndloadMenuOpen: false,\r\n\t\t\tinfoDialogOpen: false,\r\n\t\t};\r\n\t};\r\n\t\r\n\topenDowndloadMenu = (event) => {\r\n\t\t//\r\n\t\tthis.setState({\r\n\t\t\tdowndloadMenuOpen: true,\r\n\t\t\tdowndloadMenuAnchor: event.currentTarget\r\n\t\t});\r\n\t};\r\n\t\r\n\tcloseDowndloadMenu = () => {\r\n\t\t//\r\n\t\tif (this.state.downdloadMenuOpen){\r\n\t\t\tthis.setState({\r\n\t\t\t\tdowndloadMenuOpen: false,\r\n\t\t\t\tdowndloadMenuAnchor: null\r\n\t\t\t});\r\n\t\t};\r\n\t};\r\n\t\r\n\topenInfoDialog = () => {\r\n\t\t//\r\n\t\tthis.setState({\r\n\t\t\tinfoDialogOpen: true,\r\n\t\t})\r\n\t};\r\n\t\r\n\tcloseInfoDialog = () => {\r\n\t\t//\r\n\t\tthis.setState({\r\n\t\t\tinfoDialogOpen: false,\r\n\t\t})\r\n\t};\r\n\t\r\n\trenderMenuItem = (funct, label, key) => {\r\n\t\t//\r\n\t\treturn (\r\n\t\t\t<MenuItem onClick={funct} key={key}>\r\n\t\t\t\t{label}\r\n\t\t\t</MenuItem>\r\n\t\t);\r\n\t};\r\n\t\r\n\trenderButton = (fucnt, label, key, icon=null, controls=null) => {\r\n\t\t//\r\n\t\tlet buttonProps = {\r\n\t\t\tkey: key,\r\n\t\t\tvariant: 'text',\r\n\t\t\tcolor: \"inherit\",\r\n\t\t\tsize: \"small\",\r\n\t\t\tonClick: fucnt,\r\n\t\t};\r\n\t\tif (icon){\r\n\t\t\tbuttonProps.startIcon=icon;\r\n\t\t};\r\n\t\tif (controls){\r\n\t\t\tbuttonProps['aria-controls']=controls;\r\n\t\t\tbuttonProps['aria-haspopup']=\"true\";\r\n\t\t};\r\n\t\treturn (<Button {...buttonProps}>{label}</Button>);\r\n\t};\r\n\t\r\n\trenderDownloadMenuItems = () => {\r\n\t\t//\r\n\t\tlet {downloadFile, downloadAllFiles, downloadCurrent} = this.props;\r\n\t\tlet menu = [this.renderMenuItem(downloadFile, 'This File', 0)];\r\n\t\tif (downloadAllFiles){\r\n\t\t\tmenu.push(this.renderMenuItem(downloadAllFiles, 'All Files', 1));\r\n\t\t};\r\n\t\tif (downloadCurrent){\r\n\t\t\tmenu.push(this.renderMenuItem(downloadCurrent, 'This Text', 2));\r\n\t\t};\r\n\t\treturn menu;\r\n\t};\r\n\t\r\n\trenderDownloadBlock = () => {\r\n\t\t//\r\n\t\tlet {downdloadMenuAnchor, downdloadMenuOpen} = this.state;\r\n\t\tlet dButton= (\r\n\t\t\t<ClickAwayListener\r\n\t\t\t\tkey={0}\r\n\t\t\t\tonClickAway={this.closeDowndloadMenu}\r\n\t\t\t>\r\n\t\t\t{this.renderButton(\r\n\t\t\t\tthis.openDowndloadMenu,\r\n\t\t\t\t'download',\r\n\t\t\t\t0,\r\n\t\t\t\t<GetAppIcon/>,\r\n\t\t\t\t'download-menu'\r\n\t\t\t\t)\r\n\t\t\t}\r\n\t\t\t</ClickAwayListener>\r\n\t\t);\r\n\t\tlet dMenu = (\r\n\t\t\t<Menu\r\n\t\t\t\tid=\"download-menu\"\r\n\t\t\t\tkey={1}\r\n\t\t\t\tanchorEl={downdloadMenuAnchor}\r\n\t\t\t\tkeepMounted\r\n\t\t\t\topen={downdloadMenuOpen}\r\n\t\t\t\tTransitionComponent={Fade}\r\n\t\t\t\tgetContentAnchorEl={null}\r\n\t\t\t\tanchorOrigin={{\r\n\t\t\t\t\tvertical: 'bottom',\r\n\t\t\t\t\thorizontal: 'right',\r\n\t\t\t\t}}\r\n\t\t\t\ttransformOrigin={{\r\n\t\t\t\t\tvertical: 'top',\r\n\t\t\t\t\thorizontal: 'right',\r\n\t\t\t\t}}\r\n\t\t\t>\r\n\t\t\t\t{this.renderDownloadMenuItems()}\r\n\t\t\t</Menu>\r\n\t\t);\r\n\t\treturn [dButton, dMenu]\r\n\t};\r\n\t\r\n\trenderInfoDialog = () => {\r\n\t\t//\r\n\t\treturn (\r\n\t\t\t<Dialog\r\n\t\t\t\topen={this.state.infoDialogOpen}\r\n\t\t\t\tonClose={this.closeInfoDialog}\r\n\t\t\t\taria-labelledby=\"info-dialog-title\"\r\n\t\t\t\taria-describedby=\"alert-dialog-description\"\r\n\t\t\t\tkey={5}\r\n\t\t\t>\r\n\t\t\t\t<DialogTitle id=\"info-dialog-title\">\r\n\t\t\t\t\t{\"About\"}\r\n\t\t\t\t</DialogTitle>\r\n\t\t\t\t<DialogContent>\r\n\t\t\t\t\t<DialogContentText id=\"alert-dialog-description\">\r\n\t\t\t\t\t\tATF Checker Application.<br/>\r\n\t\t\t\t\t\tVersion Alpha.2.0<br/><br/>\r\n\t\t\t\t\t\tUse to validate and correct cuneiform transliterations in the&nbsp;\r\n\t\t\t\t\t\t<a href='http://oracc.ub.uni-muenchen.de/doc/help/editinginatf/'>ATF format</a>. \r\n\t\t\t\t\t\tAccepts .atf and .txt files.<br/><br/>\r\n\t\t\t\t\t\tIlya Khait (ekh.itd@gmail.com)\r\n\t\t\t\t\t</DialogContentText>\r\n\t\t\t\t</DialogContent>\r\n\t\t\t\t<DialogActions>\r\n\t\t\t\t\t<Button onClick={this.closeInfoDialog} color=\"primary\" autoFocus>\r\n\t\t\t\t\t\tOK\r\n\t\t\t\t\t</Button>\r\n\t\t\t\t</DialogActions>\r\n\t\t\t</Dialog>\r\n\t\t);\r\n\t};\r\n\t\r\n\trenderInfoBlock = () => {\r\n\t\tlet infoButton = this.renderButton(\r\n\t\t\tthis.openInfoDialog, '', 2, <InfoIcon/>\r\n\t\t);\r\n\t\tlet infoDialog = this.renderInfoDialog();\r\n\t\treturn [infoButton, infoDialog]\r\n\t};\r\n\t\r\n\trender(){\r\n\t\tlet {onAddButtonClick} = this.props;\r\n\t\tlet downloadButton = this.renderDownloadBlock();\r\n\t\tlet loadMoreButton = this.renderButton(\r\n\t\t\tonAddButtonClick, 'add', 3, <AddIcon/>\r\n\t\t);\r\n\t\tlet infoButton = this.renderInfoBlock();\r\n\t\treturn (\r\n\t\t\t<AppBar>\r\n\t\t\t\t<Toolbar>\r\n\t\t\t\t<Grid container \r\n\t\t\t\t\tspacing={2} \r\n\t\t\t\t\tstyle={gridStyle}\r\n\t\t\t\t\tjustify=\"space-between\"\r\n\t\t\t\t>\t\r\n\t\t\t\t\t<Grid item xs={1}>\r\n\t\t\t\t\t\t{loadMoreButton}\r\n\t\t\t\t\t</Grid>\r\n\t\t\t\t\t<Grid item xs={1}>\r\n\t\t\t\t\t\t{downloadButton}\r\n\t\t\t\t\t</Grid>\r\n\t\t\t\t\t<Grid item xs={1}>\r\n\t\t\t\t\t\t{/*infoButton*/}\r\n\t\t\t\t\t</Grid>\r\n\t\t\t\t</Grid>\r\n\t\t\t\t</Toolbar>\r\n\t\t\t</AppBar>\r\n\t\t)\r\n\t};\r\n};","C:\\users\\eli\\desktop\\programmatical\\cuneiform_and_ane\\cuneiform_processing\\uqnu\\uqnu\\src\\features\\editor\\Editor.js",["449"],"/* eslint-disable react/jsx-no-target-blank */\r\n/* eslint-disable no-unused-vars */\r\nimport React, { useState, Component } from 'react';\r\nimport { useSelector, useDispatch, connect, mapDispatchToProp } from 'react-redux';\r\nimport {\r\n  selectActions,\r\n  setCursor,\r\n  activate,\r\n  modify,\r\n  add,\r\n  remove,\r\n  undo,\r\n  redo,\r\n} from './editorSlice';\r\n\r\nimport { Chr, ChrEditPanel } from './ChrComponent';\r\nimport styles from './Editor.module.css';\r\n\r\nimport {Collapse, IconButton} from '@material-ui/core';\r\n\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport ArrowDropDownIcon from '@material-ui/icons/ArrowDropDown';\r\nimport ArrowDropUpIcon from '@material-ui/icons/ArrowDropUp';\r\n\r\n\r\n\r\nexport function Editor( ) {\r\n  //\r\n  const actions = useSelector(selectActions);\r\n  const dispatch = useDispatch();\r\n  const [incrementAmount, setIncrementAmount] = useState('2');\r\n  \r\n  return (\r\n    <JTFEditor/>\r\n  );\r\n\r\n/*   return (\r\n  <div>\r\n    <JTFEditor/>\r\n    <span>[ { actions } ]</span>\r\n    <br/>\r\n    <button\r\n      aria-label=\"Add value\"\r\n      onClick={() => dispatch(add('some data'))}\r\n    >\r\n      Add\r\n    </button>\r\n    <button\r\n      aria-label=\"Remove value\"\r\n      onClick={() => dispatch(remove(null))}\r\n    >\r\n      Remove\r\n    </button>\r\n    <button\r\n      aria-label=\"Modify value\"\r\n      onClick={() => dispatch(modify( 'some changed data' ))}\r\n    >\r\n      Modify\r\n    </button>\r\n    <br/>\r\n    <button\r\n      aria-label=\"Undo\"\r\n      onClick={() => dispatch(undo( 'some changed data' ))}\r\n    >\r\n      Undo\r\n    </button>\r\n    <button\r\n      aria-label=\"Redo\"\r\n      onClick={() => dispatch(redo( 'some changed data' ))}\r\n    >\r\n      Redo\r\n    </button>\r\n  </div>\r\n  ); */\r\n};\r\n\r\nfunction romanize( num ) {\r\n  //\r\n  var lookup = {M:1000,CM:900,D:500,CD:400,C:100,XC:90,L:50,XL:40,X:10,IX:9,V:5,IV:4,I:1},roman = '',i;\r\n  for ( i in lookup ) {\r\n    while ( num >= lookup[i] ) {\r\n      roman += i;\r\n      num -= lookup[i];\r\n    }\r\n  }\r\n  return roman;\r\n}\r\n\r\nclass _JTFEditor extends Component {\r\n  // Component's function\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      layout: 'vertical',\r\n      collapsed: {},\r\n      zoom: 100,\r\n    };\r\n  };\r\n  \r\n  \r\n  collapsableChildren( obj, id, classes ){\r\n    //\r\n    return (\r\n    <Collapse\r\n     in={!this.state.collapsed[id]}\r\n     timeout=\"auto\" \r\n     unmountOnExit\r\n     className={classes}\r\n    >\r\n    { this.renderChildren(obj) }\r\n    </Collapse>\r\n    );\r\n  };\r\n  \r\n  collapseIcon( id ){\r\n    //\r\n    let {collapsed} = this.state;\r\n    let toggle = (e) => {\r\n      if (!collapsed[id]){ \r\n        collapsed[id] = true;\r\n      } else {  \r\n        delete collapsed[id];\r\n      }\r\n      this.setState( {collapsed: collapsed} )\r\n    };\r\n    \r\n    let Icon = (!collapsed[id]) ? ArrowDropDownIcon : ArrowDropUpIcon ;\r\n    let stateClass = (!collapsed[id]) ? 'expanded' : 'collapsed' ;\r\n    let iconClasses = this.makeClasses(['collapsableTreeIcon', stateClass]);\r\n    \r\n    return (\r\n     <Icon \r\n      className={iconClasses}\r\n      onClick={ toggle }\r\n     />\r\n     );\r\n  };\r\n  \r\n  makeClasses( classesArray ){\r\n    // ClassName string from array of strings.\r\n    // Adds layout state param from.\r\n    let { layout } = this.state;\r\n    return [ ...classesArray, layout ]\r\n      .map(CN => styles[CN])\r\n      .join(' ')\r\n  };\r\n  \r\n  renderObject( obj ){\r\n    //  \r\n    let rootClasses = this.makeClasses(['object', 'root']);\r\n    let labelClasses = this.makeClasses(['object', 'label']);\r\n    let contentClasses = this.makeClasses(['object', 'content']);\r\n    return( \r\n    <div className={rootClasses}>\r\n      { this.collapseIcon( obj.id ) }\r\n      <span className={labelClasses}>\r\n      { (obj.name) ? `${obj.type} ${obj.name}` : obj.type }\r\n      </span>\r\n      { this.collapsableChildren( obj, obj.id, contentClasses ) }\r\n    </div>\r\n    )\r\n  };\r\n  \r\n  renderChildren( obj ){\r\n    //\r\n    if ( !obj.children ){\r\n      return null;\r\n    }\r\n    return obj.children.map( (child, i ) => {\r\n      if (!child._class){\r\n          console.log( 'rendering error: no _class', child )\r\n          return null\r\n      }\r\n      let classCap = child._class.charAt(0).toUpperCase() + child._class.slice(1)\r\n      let renderMethod = this[`render${classCap}`];\r\n      if ( renderMethod ){\r\n        renderMethod = renderMethod.bind( this );\r\n        return renderMethod( child, obj, i );\r\n      } else {\r\n        console.log( 'missing render method for JTF class:', classCap, child );\r\n      }\r\n    });\r\n  };\r\n  \r\n  interBreakClasses( obj, parentObj, i){\r\n    // returns a list of classes to apply to whitespaces \r\n    // that gap between broken / damaged sequences.\r\n    let classes = [];\r\n    if ( \r\n         parentObj \r\n      && parentObj.children \r\n      && parentObj.children[i+1]\r\n      && parentObj.children[i+1].children\r\n      && parentObj.children[i+1].children[0]\r\n      && parentObj.children[i+1].children[0].damage\r\n      && obj\r\n      && obj.children\r\n      && obj.children[0]\r\n      && ( obj.children[0].damage || obj.children[0].broken )\r\n    ){\r\n        let first = (obj.children[0].damage===true) ? 'brk' : 'dmg';\r\n        let second = (parentObj.children[i+1].children[0].damage===true) \r\n          ? 'brk' \r\n          : 'dmg'\r\n        classes = (first!==second) ? [ first, second ] : [ first ];\r\n    };\r\n    return classes;\r\n  };\r\n  \r\n  /* Structure elements */\r\n  \r\n  renderSurface( obj, parentObj, i ){\r\n    //\r\n    let { id } = obj; //ToDo: add functionality for cases when ID changes\r\n    let last = (parentObj.children.length===i+1);\r\n    let rootClassNames = ['surface', 'root'];\r\n    if ( obj.children.map( o => o._class).includes('line') ){\r\n      rootClassNames.push( 'inlineContainer' )\r\n    };\r\n    let rootClasses = this.makeClasses(rootClassNames);\r\n    let labelClasses = this.makeClasses(['surface', 'label']);\r\n    let contentClasses = this.makeClasses(['surface', 'content']);\r\n    let TCClasses = this.makeClasses(['surface', 'treeConnection']);\r\n    let TCOClasses = this.makeClasses(['surface', 'treeConnectionOverlay']);\r\n    \r\n    return( \r\n    <div className={rootClasses}>\r\n      <div className={TCClasses}/>\r\n      { ( last ) ? <div className={TCOClasses}/> : '' }\r\n      { this.collapseIcon( id ) }\r\n      <span className={labelClasses}> \r\n      { (obj.name) ? `${obj.type} ${obj.name}` : obj.type }\r\n      </span>\r\n      { this.collapsableChildren( obj, id, contentClasses ) }\r\n    </div>\r\n    )\r\n  };\r\n  \r\n  renderColumn( obj, parentObj, i ){\r\n    //  \r\n    let name = obj.name.replace(\"'\", '');\r\n    let last = (parentObj.children.length===i+1);\r\n    let breaks = (obj.name.match(/'/g)||[]).length;\r\n    let { id } = obj; //ToDo: add functionality for cases when ID changes\r\n    let rootClasses = this.makeClasses(['column', 'root']);\r\n    let labelClasses = this.makeClasses(['column', 'label']);\r\n    let contentClasses = this.makeClasses(['column', 'content']);\r\n    let TCClasses = this.makeClasses(['column', 'treeConnection']);\r\n    let TCOClasses = this.makeClasses(['column', 'treeConnectionOverlay']);\r\n\r\n    return( \r\n      <div\r\n       className={ rootClasses }\r\n      >\r\n       <div className={TCClasses}/>\r\n       { ( last ) ? <div className={TCOClasses}/> : '' }\r\n       { this.collapseIcon( id ) }\r\n       <span className={labelClasses}\r\n       >\r\n         Column {romanize(name)}{\"'\".repeat(breaks)}\r\n       </span>\r\n       {this.collapsableChildren( obj, id, contentClasses )}\r\n      </div>\r\n    );\r\n  };\r\n  \r\n  /* Line-level elements */\r\n  \r\n  renderComment( obj, parentObj, i ){\r\n    //\r\n    let rootClasses = this.makeClasses(['comment', 'root']);\r\n    return (\r\n      <div className={rootClasses}>\r\n      { obj.value }\r\n      </div>\r\n    )\r\n  }\r\n  \r\n  renderState( obj, parentObj, i ){\r\n    //\r\n    let rootClasses = this.makeClasses(['state', 'root']);\r\n    let { type, value, extent, scope, state, lacuna } = obj;\r\n    let content = (type==='loose') \r\n      ? <>{value}</>\r\n      : <>{extent} {state} {scope}</>\r\n    return (\r\n      <div className={rootClasses}>\r\n      { content }\r\n      </div>\r\n    )\r\n  }\r\n  \r\n  renderLine( obj, parentObj, i ){\r\n    //\r\n    let rootClassNames = ['line', 'root'];\r\n    let containsFields = obj.children.map( c => c._class ).includes('field');\r\n    if (containsFields){ rootClassNames.push( 'withFields' ) };\r\n    let rootClasses = this.makeClasses(rootClassNames);\r\n    let labelClasses = this.makeClasses(['line', 'label']);\r\n    let contentClasses = this.makeClasses(['line', 'content']);\r\n    return( \r\n    <div className={rootClasses}>\r\n    <span className={labelClasses}>\r\n      {obj.name}.\r\n    </span>\r\n    <span className={contentClasses}>\r\n      {this.renderChildren(obj)}\r\n    </span>\r\n    { (obj.QLink) ? this.renderQLink(obj.QLink, obj, 0) : '' }\r\n    </div>\r\n    )\r\n  };\r\n\r\n  renderQLink( obj, parentObj, i ){\r\n    //\r\n    let rootClasses = this.makeClasses(['QLink', 'root']);\r\n    return (\r\n      <div className={rootClasses}>\r\n      <a \r\n       target='_blank'\r\n       href={`https://cdli.ucla.edu/${obj.QNumber}`}>\r\n       { obj.QNumber }\r\n      </a>:\r\n      { obj.QLine }\r\n      </div>\r\n    )\r\n  }\r\n  \r\n  /* Inline elements */\r\n  \r\n  renderField( obj, parentObj, i ){\r\n    // \r\n    let rootClasses = this.makeClasses(['field', 'root']);\r\n    let labelClasses = this.makeClasses(['field', 'label']);\r\n    let borderClasses = this.makeClasses(['field', 'frame']);\r\n    let contentClasses = this.makeClasses(['field', 'content']);\r\n    return (\r\n      <span className={rootClasses}>\r\n        <span className={borderClasses}/>\r\n        <span className={labelClasses}>\r\n          {i+1}\r\n        </span>\r\n        <span className={contentClasses}>\r\n         { this.renderChildren(obj) }\r\n        </span>\r\n      </span>\r\n    );\r\n  };\r\n  \r\n  renderSequence( obj, parentObj, i ){\r\n    // \r\n    let rootClasses = this.makeClasses(['sequence', 'root']);\r\n    let interBreakClasses = this.interBreakClasses( obj, parentObj, i );\r\n    return( \r\n      <div \r\n       className={rootClasses}\r\n      > \r\n      { this.renderChildren(obj) }\r\n      <span className={this.makeClasses(['whitespace', ...interBreakClasses])}\r\n      > </span>\r\n      </div> \r\n    )\r\n  };\r\n  \r\n  renderChr( obj, parentObj, i ){\r\n    //\r\n    let { cursor } = this.props;\r\n    return <Chr\r\n        obj={(cursor && cursor.id===obj.id) ? cursor : obj}\r\n        parentObj={parentObj}\r\n        i={i}\r\n        makeClasses={this.makeClasses.bind(this)}\r\n        setCursor={this.props.setCursor.bind(this)}\r\n        atCursor={(cursor && cursor.id===obj.id) ? true : false}\r\n    />\r\n  };\r\n  \r\n  zoom( content ){\r\n      //\r\n      return (\r\n      <div id='zoom' style={{ \r\n          transformOrigin: '0 0',\r\n          transform: `scale(${this.props.zoom}%)`,\r\n          }}\r\n      >{content}</div>)\r\n  };\r\n  \r\n  render( ){\r\n    //\r\n    let { JTF } = this.props;\r\n    if (!JTF || !JTF.success){\r\n      return <div>no JTF found :(</div>\r\n    }\r\n    let content = JTF.objects.map( o => this.renderObject( o ));\r\n    return(\r\n      <div key='JTFEditor' className={this.makeClasses(['JTFEditor'])}>\r\n        {/*<ChrEditPanel/>*/}\r\n        <div id='JTFEditorBoard' key=\"JTFEditorBoard\">\r\n          { this.zoom( content ) }\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  //console.log( 'redux state:', state )\r\n  return {\r\n      JTF: state.editor.JTF,\r\n      cursor: state.editor.cursor,\r\n      zoom: state.editor.zoom,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n  selectActions,\r\n  setCursor,\r\n  activate,\r\n  modify,\r\n  add,\r\n  remove,\r\n  undo,\r\n  redo,\r\n};\r\n\r\nconst JTFEditor = connect(mapStateToProps, mapDispatchToProps)(_JTFEditor)",{"ruleId":"450","replacedBy":"451"},{"ruleId":"452","replacedBy":"453"},{"ruleId":"450","replacedBy":"454"},{"ruleId":"452","replacedBy":"455"},{"ruleId":"456","severity":1,"message":"457","line":2,"column":45,"nodeType":"458","messageId":"459","endLine":2,"endColumn":62},{"ruleId":"456","severity":1,"message":"460","line":5,"column":3,"nodeType":"458","messageId":"459","endLine":5,"endColumn":11},{"ruleId":"456","severity":1,"message":"461","line":18,"column":8,"nodeType":"458","messageId":"459","endLine":18,"endColumn":18},{"ruleId":"456","severity":1,"message":"462","line":19,"column":8,"nodeType":"458","messageId":"459","endLine":19,"endColumn":22},{"ruleId":"456","severity":1,"message":"463","line":27,"column":10,"nodeType":"458","messageId":"459","endLine":27,"endColumn":25},{"ruleId":"456","severity":1,"message":"464","line":27,"column":27,"nodeType":"458","messageId":"459","endLine":27,"endColumn":45},{"ruleId":"465","severity":1,"message":"466","line":122,"column":42,"nodeType":"467","messageId":"468","endLine":122,"endColumn":44},{"ruleId":"456","severity":1,"message":"469","line":249,"column":11,"nodeType":"458","messageId":"459","endLine":249,"endColumn":17},{"ruleId":"470","severity":1,"message":"471","line":284,"column":8,"nodeType":"472","endLine":284,"endColumn":23},{"ruleId":"473","severity":1,"message":"474","line":322,"column":3,"nodeType":"475","messageId":"476","endLine":330,"endColumn":4},{"ruleId":"456","severity":1,"message":"477","line":2,"column":8,"nodeType":"458","messageId":"459","endLine":2,"endColumn":12},{"ruleId":"456","severity":1,"message":"478","line":5,"column":10,"nodeType":"458","messageId":"459","endLine":5,"endColumn":16},{"ruleId":"450","replacedBy":"479"},{"ruleId":"452","replacedBy":"480"},{"ruleId":"450","replacedBy":"481"},{"ruleId":"452","replacedBy":"482"},{"ruleId":"456","severity":1,"message":"483","line":5,"column":5,"nodeType":"458","messageId":"459","endLine":5,"endColumn":12},{"ruleId":"456","severity":1,"message":"484","line":14,"column":7,"nodeType":"458","messageId":"459","endLine":14,"endColumn":22},{"ruleId":"456","severity":1,"message":"485","line":81,"column":8,"nodeType":"458","messageId":"459","endLine":81,"endColumn":13},{"ruleId":"456","severity":1,"message":"486","line":82,"column":6,"nodeType":"458","messageId":"459","endLine":82,"endColumn":18},{"ruleId":"456","severity":1,"message":"487","line":85,"column":6,"nodeType":"458","messageId":"459","endLine":85,"endColumn":15},{"ruleId":"456","severity":1,"message":"488","line":156,"column":15,"nodeType":"458","messageId":"459","endLine":156,"endColumn":33},{"ruleId":"456","severity":1,"message":"489","line":2,"column":10,"nodeType":"458","messageId":"459","endLine":2,"endColumn":16},{"ruleId":"456","severity":1,"message":"461","line":8,"column":10,"nodeType":"458","messageId":"459","endLine":8,"endColumn":20},{"ruleId":"456","severity":1,"message":"490","line":8,"column":22,"nodeType":"458","messageId":"459","endLine":8,"endColumn":29},{"ruleId":"456","severity":1,"message":"491","line":9,"column":8,"nodeType":"458","messageId":"459","endLine":9,"endColumn":16},{"ruleId":"456","severity":1,"message":"492","line":10,"column":8,"nodeType":"458","messageId":"459","endLine":10,"endColumn":22},{"ruleId":"456","severity":1,"message":"493","line":11,"column":8,"nodeType":"458","messageId":"459","endLine":11,"endColumn":16},{"ruleId":"456","severity":1,"message":"494","line":12,"column":8,"nodeType":"458","messageId":"459","endLine":12,"endColumn":19},{"ruleId":"456","severity":1,"message":"495","line":13,"column":8,"nodeType":"458","messageId":"459","endLine":13,"endColumn":24},{"ruleId":"456","severity":1,"message":"496","line":77,"column":18,"nodeType":"458","messageId":"459","endLine":77,"endColumn":22},{"ruleId":"456","severity":1,"message":"497","line":166,"column":22,"nodeType":"458","messageId":"459","endLine":166,"endColumn":28},{"ruleId":"456","severity":1,"message":"498","line":188,"column":15,"nodeType":"458","messageId":"459","endLine":188,"endColumn":20},{"ruleId":"456","severity":1,"message":"499","line":216,"column":4,"nodeType":"458","messageId":"459","endLine":216,"endColumn":20},{"ruleId":"456","severity":1,"message":"500","line":218,"column":4,"nodeType":"458","messageId":"459","endLine":218,"endColumn":12},{"ruleId":"456","severity":1,"message":"501","line":219,"column":4,"nodeType":"458","messageId":"459","endLine":219,"endColumn":15},{"ruleId":"502","severity":1,"message":"503","line":254,"column":6,"nodeType":"504","endLine":256,"endColumn":9},{"ruleId":"456","severity":1,"message":"505","line":11,"column":13,"nodeType":"458","messageId":"459","endLine":11,"endColumn":14},{"ruleId":"456","severity":1,"message":"506","line":20,"column":6,"nodeType":"458","messageId":"459","endLine":20,"endColumn":14},{"ruleId":"456","severity":1,"message":"507","line":3,"column":45,"nodeType":"458","messageId":"459","endLine":3,"endColumn":49},{"ruleId":"456","severity":1,"message":"508","line":4,"column":10,"nodeType":"458","messageId":"459","endLine":4,"endColumn":20},{"ruleId":"450","replacedBy":"509"},{"ruleId":"452","replacedBy":"510"},{"ruleId":"456","severity":1,"message":"511","line":65,"column":7,"nodeType":"458","messageId":"459","endLine":65,"endColumn":17},{"ruleId":"456","severity":1,"message":"512","line":85,"column":7,"nodeType":"458","messageId":"459","endLine":85,"endColumn":19},{"ruleId":"513","severity":1,"message":"514","line":104,"column":5,"nodeType":"475","messageId":"515","endLine":106,"endColumn":6},{"ruleId":"456","severity":1,"message":"516","line":131,"column":31,"nodeType":"458","messageId":"459","endLine":131,"endColumn":38},{"ruleId":"513","severity":1,"message":"514","line":292,"column":5,"nodeType":"475","messageId":"515","endLine":294,"endColumn":6},{"ruleId":"456","severity":1,"message":"517","line":3,"column":13,"nodeType":"458","messageId":"459","endLine":3,"endColumn":14},{"ruleId":"456","severity":1,"message":"518","line":13,"column":35,"nodeType":"458","messageId":"459","endLine":13,"endColumn":39},{"ruleId":"456","severity":1,"message":"460","line":25,"column":3,"nodeType":"458","messageId":"459","endLine":25,"endColumn":11},{"ruleId":"456","severity":1,"message":"519","line":26,"column":3,"nodeType":"458","messageId":"459","endLine":26,"endColumn":9},{"ruleId":"456","severity":1,"message":"520","line":27,"column":3,"nodeType":"458","messageId":"459","endLine":27,"endColumn":6},{"ruleId":"456","severity":1,"message":"521","line":28,"column":3,"nodeType":"458","messageId":"459","endLine":28,"endColumn":9},{"ruleId":"456","severity":1,"message":"522","line":29,"column":3,"nodeType":"458","messageId":"459","endLine":29,"endColumn":7},{"ruleId":"456","severity":1,"message":"523","line":30,"column":3,"nodeType":"458","messageId":"459","endLine":30,"endColumn":7},{"ruleId":"456","severity":1,"message":"524","line":63,"column":5,"nodeType":"458","messageId":"459","endLine":63,"endColumn":19},{"ruleId":"456","severity":1,"message":"525","line":64,"column":5,"nodeType":"458","messageId":"459","endLine":64,"endColumn":23},{"ruleId":"456","severity":1,"message":"526","line":256,"column":30,"nodeType":"458","messageId":"459","endLine":256,"endColumn":43},{"ruleId":"456","severity":1,"message":"527","line":257,"column":13,"nodeType":"458","messageId":"459","endLine":257,"endColumn":19},{"ruleId":"456","severity":1,"message":"528","line":258,"column":15,"nodeType":"458","messageId":"459","endLine":258,"endColumn":23},{"ruleId":"456","severity":1,"message":"526","line":356,"column":30,"nodeType":"458","messageId":"459","endLine":356,"endColumn":43},{"ruleId":"456","severity":1,"message":"529","line":3,"column":10,"nodeType":"458","messageId":"459","endLine":3,"endColumn":24},{"ruleId":"513","severity":1,"message":"514","line":5,"column":3,"nodeType":"475","messageId":"515","endLine":7,"endColumn":4},{"ruleId":"530","severity":1,"message":"531","line":60,"column":25,"nodeType":"532","messageId":"533","endLine":60,"endColumn":26},{"ruleId":"450","replacedBy":"534"},{"ruleId":"452","replacedBy":"535"},{"ruleId":"456","severity":1,"message":"529","line":3,"column":10,"nodeType":"458","messageId":"459","endLine":3,"endColumn":24},{"ruleId":"450","replacedBy":"536"},{"ruleId":"452","replacedBy":"537"},{"ruleId":"456","severity":1,"message":"517","line":3,"column":13,"nodeType":"458","messageId":"459","endLine":3,"endColumn":14},{"ruleId":"456","severity":1,"message":"460","line":31,"column":3,"nodeType":"458","messageId":"459","endLine":31,"endColumn":11},{"ruleId":"456","severity":1,"message":"519","line":32,"column":3,"nodeType":"458","messageId":"459","endLine":32,"endColumn":9},{"ruleId":"456","severity":1,"message":"520","line":33,"column":3,"nodeType":"458","messageId":"459","endLine":33,"endColumn":6},{"ruleId":"456","severity":1,"message":"521","line":34,"column":3,"nodeType":"458","messageId":"459","endLine":34,"endColumn":9},{"ruleId":"456","severity":1,"message":"522","line":35,"column":3,"nodeType":"458","messageId":"459","endLine":35,"endColumn":7},{"ruleId":"456","severity":1,"message":"523","line":36,"column":3,"nodeType":"458","messageId":"459","endLine":36,"endColumn":7},{"ruleId":"456","severity":1,"message":"525","line":66,"column":5,"nodeType":"458","messageId":"459","endLine":66,"endColumn":23},{"ruleId":"456","severity":1,"message":"496","line":204,"column":30,"nodeType":"458","messageId":"459","endLine":204,"endColumn":34},{"ruleId":"456","severity":1,"message":"526","line":366,"column":30,"nodeType":"458","messageId":"459","endLine":366,"endColumn":43},{"ruleId":"456","severity":1,"message":"538","line":501,"column":21,"nodeType":"458","messageId":"459","endLine":501,"endColumn":25},{"ruleId":"450","replacedBy":"539"},{"ruleId":"452","replacedBy":"540"},{"ruleId":"456","severity":1,"message":"541","line":1,"column":28,"nodeType":"458","messageId":"459","endLine":1,"endColumn":36},{"ruleId":"456","severity":1,"message":"507","line":3,"column":45,"nodeType":"458","messageId":"459","endLine":3,"endColumn":49},{"ruleId":"456","severity":1,"message":"508","line":4,"column":10,"nodeType":"458","messageId":"459","endLine":4,"endColumn":20},{"ruleId":"456","severity":1,"message":"489","line":2,"column":10,"nodeType":"458","messageId":"459","endLine":2,"endColumn":16},{"ruleId":"456","severity":1,"message":"461","line":8,"column":10,"nodeType":"458","messageId":"459","endLine":8,"endColumn":20},{"ruleId":"456","severity":1,"message":"490","line":8,"column":22,"nodeType":"458","messageId":"459","endLine":8,"endColumn":29},{"ruleId":"456","severity":1,"message":"491","line":9,"column":8,"nodeType":"458","messageId":"459","endLine":9,"endColumn":16},{"ruleId":"456","severity":1,"message":"492","line":10,"column":8,"nodeType":"458","messageId":"459","endLine":10,"endColumn":22},{"ruleId":"456","severity":1,"message":"493","line":11,"column":8,"nodeType":"458","messageId":"459","endLine":11,"endColumn":16},{"ruleId":"456","severity":1,"message":"494","line":12,"column":8,"nodeType":"458","messageId":"459","endLine":12,"endColumn":19},{"ruleId":"456","severity":1,"message":"495","line":13,"column":8,"nodeType":"458","messageId":"459","endLine":13,"endColumn":24},{"ruleId":"456","severity":1,"message":"542","line":19,"column":10,"nodeType":"458","messageId":"459","endLine":19,"endColumn":21},{"ruleId":"456","severity":1,"message":"543","line":19,"column":23,"nodeType":"458","messageId":"459","endLine":19,"endColumn":34},{"ruleId":"456","severity":1,"message":"457","line":19,"column":45,"nodeType":"458","messageId":"459","endLine":19,"endColumn":62},{"ruleId":"456","severity":1,"message":"497","line":171,"column":31,"nodeType":"458","messageId":"459","endLine":171,"endColumn":37},{"ruleId":"450","replacedBy":"544"},{"ruleId":"452","replacedBy":"545"},{"ruleId":"456","severity":1,"message":"457","line":2,"column":45,"nodeType":"458","messageId":"459","endLine":2,"endColumn":62},{"ruleId":"456","severity":1,"message":"546","line":14,"column":15,"nodeType":"458","messageId":"459","endLine":14,"endColumn":27},{"ruleId":"456","severity":1,"message":"461","line":19,"column":8,"nodeType":"458","messageId":"459","endLine":19,"endColumn":18},{"ruleId":"456","severity":1,"message":"462","line":20,"column":8,"nodeType":"458","messageId":"459","endLine":20,"endColumn":22},{"ruleId":"456","severity":1,"message":"547","line":26,"column":9,"nodeType":"458","messageId":"459","endLine":26,"endColumn":16},{"ruleId":"456","severity":1,"message":"548","line":27,"column":9,"nodeType":"458","messageId":"459","endLine":27,"endColumn":17},{"ruleId":"456","severity":1,"message":"463","line":28,"column":10,"nodeType":"458","messageId":"459","endLine":28,"endColumn":25},{"ruleId":"456","severity":1,"message":"464","line":28,"column":27,"nodeType":"458","messageId":"459","endLine":28,"endColumn":45},{"ruleId":"465","severity":1,"message":"466","line":165,"column":42,"nodeType":"467","messageId":"468","endLine":165,"endColumn":44},{"ruleId":"456","severity":1,"message":"469","line":278,"column":46,"nodeType":"458","messageId":"459","endLine":278,"endColumn":52},{"ruleId":"470","severity":1,"message":"471","line":316,"column":8,"nodeType":"472","endLine":316,"endColumn":23},{"ruleId":"456","severity":1,"message":"505","line":11,"column":13,"nodeType":"458","messageId":"459","endLine":11,"endColumn":14},{"ruleId":"456","severity":1,"message":"506","line":20,"column":6,"nodeType":"458","messageId":"459","endLine":20,"endColumn":14},{"ruleId":"456","severity":1,"message":"511","line":65,"column":7,"nodeType":"458","messageId":"459","endLine":65,"endColumn":17},{"ruleId":"456","severity":1,"message":"512","line":85,"column":7,"nodeType":"458","messageId":"459","endLine":85,"endColumn":19},{"ruleId":"513","severity":1,"message":"514","line":104,"column":5,"nodeType":"475","messageId":"515","endLine":106,"endColumn":6},{"ruleId":"456","severity":1,"message":"516","line":131,"column":31,"nodeType":"458","messageId":"459","endLine":131,"endColumn":38},{"ruleId":"513","severity":1,"message":"514","line":292,"column":5,"nodeType":"475","messageId":"515","endLine":294,"endColumn":6},{"ruleId":"456","severity":1,"message":"549","line":187,"column":7,"nodeType":"458","messageId":"459","endLine":187,"endColumn":17},{"ruleId":"456","severity":1,"message":"483","line":5,"column":5,"nodeType":"458","messageId":"459","endLine":5,"endColumn":12},{"ruleId":"456","severity":1,"message":"484","line":14,"column":7,"nodeType":"458","messageId":"459","endLine":14,"endColumn":22},{"ruleId":"456","severity":1,"message":"485","line":81,"column":8,"nodeType":"458","messageId":"459","endLine":81,"endColumn":13},{"ruleId":"456","severity":1,"message":"486","line":82,"column":6,"nodeType":"458","messageId":"459","endLine":82,"endColumn":18},{"ruleId":"456","severity":1,"message":"487","line":85,"column":6,"nodeType":"458","messageId":"459","endLine":85,"endColumn":15},{"ruleId":"456","severity":1,"message":"488","line":155,"column":15,"nodeType":"458","messageId":"459","endLine":155,"endColumn":33},{"ruleId":"456","severity":1,"message":"542","line":3,"column":10,"nodeType":"458","messageId":"459","endLine":3,"endColumn":21},{"ruleId":"456","severity":1,"message":"543","line":3,"column":23,"nodeType":"458","messageId":"459","endLine":3,"endColumn":34},{"ruleId":"456","severity":1,"message":"457","line":3,"column":45,"nodeType":"458","messageId":"459","endLine":3,"endColumn":62},{"ruleId":"456","severity":1,"message":"550","line":16,"column":10,"nodeType":"458","messageId":"459","endLine":16,"endColumn":16},{"ruleId":"456","severity":1,"message":"551","line":16,"column":18,"nodeType":"458","messageId":"459","endLine":16,"endColumn":29},{"ruleId":"456","severity":1,"message":"552","line":16,"column":31,"nodeType":"458","messageId":"459","endLine":16,"endColumn":41},{"ruleId":"456","severity":1,"message":"553","line":26,"column":16,"nodeType":"458","messageId":"459","endLine":26,"endColumn":26},{"ruleId":"456","severity":1,"message":"554","line":31,"column":8,"nodeType":"458","messageId":"459","endLine":31,"endColumn":24},{"ruleId":"456","severity":1,"message":"555","line":32,"column":8,"nodeType":"458","messageId":"459","endLine":32,"endColumn":19},{"ruleId":"456","severity":1,"message":"556","line":39,"column":8,"nodeType":"458","messageId":"459","endLine":39,"endColumn":21},{"ruleId":"456","severity":1,"message":"557","line":56,"column":7,"nodeType":"458","messageId":"459","endLine":56,"endColumn":15},{"ruleId":"456","severity":1,"message":"558","line":60,"column":7,"nodeType":"458","messageId":"459","endLine":60,"endColumn":17},{"ruleId":"456","severity":1,"message":"559","line":64,"column":7,"nodeType":"458","messageId":"459","endLine":64,"endColumn":16},{"ruleId":"456","severity":1,"message":"560","line":68,"column":7,"nodeType":"458","messageId":"459","endLine":68,"endColumn":14},{"ruleId":"465","severity":1,"message":"466","line":225,"column":13,"nodeType":"467","messageId":"468","endLine":225,"endColumn":15},{"ruleId":"456","severity":1,"message":"477","line":2,"column":8,"nodeType":"458","messageId":"459","endLine":2,"endColumn":12},{"ruleId":"456","severity":1,"message":"478","line":5,"column":10,"nodeType":"458","messageId":"459","endLine":5,"endColumn":16},{"ruleId":"456","severity":1,"message":"561","line":1,"column":17,"nodeType":"458","messageId":"459","endLine":1,"endColumn":26},{"ruleId":"456","severity":1,"message":"478","line":6,"column":10,"nodeType":"458","messageId":"459","endLine":6,"endColumn":16},{"ruleId":"450","replacedBy":"562"},{"ruleId":"452","replacedBy":"563"},{"ruleId":"450","replacedBy":"564"},{"ruleId":"452","replacedBy":"565"},{"ruleId":"456","severity":1,"message":"566","line":3,"column":7,"nodeType":"458","messageId":"459","endLine":3,"endColumn":9},{"ruleId":"450","replacedBy":"567"},{"ruleId":"452","replacedBy":"568"},{"ruleId":"450","replacedBy":"569"},{"ruleId":"452","replacedBy":"570"},{"ruleId":"456","severity":1,"message":"541","line":1,"column":28,"nodeType":"458","messageId":"459","endLine":1,"endColumn":36},{"ruleId":"456","severity":1,"message":"505","line":11,"column":13,"nodeType":"458","messageId":"459","endLine":11,"endColumn":14},{"ruleId":"456","severity":1,"message":"506","line":20,"column":6,"nodeType":"458","messageId":"459","endLine":20,"endColumn":14},{"ruleId":"456","severity":1,"message":"542","line":3,"column":10,"nodeType":"458","messageId":"459","endLine":3,"endColumn":21},{"ruleId":"456","severity":1,"message":"543","line":3,"column":23,"nodeType":"458","messageId":"459","endLine":3,"endColumn":34},{"ruleId":"456","severity":1,"message":"457","line":3,"column":45,"nodeType":"458","messageId":"459","endLine":3,"endColumn":62},{"ruleId":"456","severity":1,"message":"550","line":18,"column":3,"nodeType":"458","messageId":"459","endLine":18,"endColumn":9},{"ruleId":"456","severity":1,"message":"551","line":19,"column":3,"nodeType":"458","messageId":"459","endLine":19,"endColumn":14},{"ruleId":"456","severity":1,"message":"552","line":20,"column":3,"nodeType":"458","messageId":"459","endLine":20,"endColumn":13},{"ruleId":"456","severity":1,"message":"553","line":35,"column":16,"nodeType":"458","messageId":"459","endLine":35,"endColumn":26},{"ruleId":"456","severity":1,"message":"554","line":40,"column":8,"nodeType":"458","messageId":"459","endLine":40,"endColumn":24},{"ruleId":"456","severity":1,"message":"555","line":41,"column":8,"nodeType":"458","messageId":"459","endLine":41,"endColumn":19},{"ruleId":"456","severity":1,"message":"556","line":48,"column":8,"nodeType":"458","messageId":"459","endLine":48,"endColumn":21},{"ruleId":"456","severity":1,"message":"557","line":65,"column":7,"nodeType":"458","messageId":"459","endLine":65,"endColumn":15},{"ruleId":"456","severity":1,"message":"558","line":69,"column":7,"nodeType":"458","messageId":"459","endLine":69,"endColumn":17},{"ruleId":"456","severity":1,"message":"559","line":73,"column":7,"nodeType":"458","messageId":"459","endLine":73,"endColumn":16},{"ruleId":"456","severity":1,"message":"560","line":77,"column":7,"nodeType":"458","messageId":"459","endLine":77,"endColumn":14},{"ruleId":"465","severity":1,"message":"466","line":236,"column":13,"nodeType":"467","messageId":"468","endLine":236,"endColumn":15},{"ruleId":"456","severity":1,"message":"571","line":288,"column":13,"nodeType":"458","messageId":"459","endLine":288,"endColumn":19},{"ruleId":"456","severity":1,"message":"517","line":3,"column":13,"nodeType":"458","messageId":"459","endLine":3,"endColumn":14},{"ruleId":"456","severity":1,"message":"460","line":31,"column":3,"nodeType":"458","messageId":"459","endLine":31,"endColumn":11},{"ruleId":"456","severity":1,"message":"519","line":32,"column":3,"nodeType":"458","messageId":"459","endLine":32,"endColumn":9},{"ruleId":"456","severity":1,"message":"520","line":33,"column":3,"nodeType":"458","messageId":"459","endLine":33,"endColumn":6},{"ruleId":"456","severity":1,"message":"521","line":34,"column":3,"nodeType":"458","messageId":"459","endLine":34,"endColumn":9},{"ruleId":"456","severity":1,"message":"522","line":35,"column":3,"nodeType":"458","messageId":"459","endLine":35,"endColumn":7},{"ruleId":"456","severity":1,"message":"523","line":36,"column":3,"nodeType":"458","messageId":"459","endLine":36,"endColumn":7},{"ruleId":"456","severity":1,"message":"525","line":66,"column":5,"nodeType":"458","messageId":"459","endLine":66,"endColumn":23},{"ruleId":"456","severity":1,"message":"496","line":204,"column":30,"nodeType":"458","messageId":"459","endLine":204,"endColumn":34},{"ruleId":"456","severity":1,"message":"526","line":366,"column":30,"nodeType":"458","messageId":"459","endLine":366,"endColumn":43},{"ruleId":"456","severity":1,"message":"483","line":5,"column":5,"nodeType":"458","messageId":"459","endLine":5,"endColumn":12},{"ruleId":"456","severity":1,"message":"484","line":14,"column":7,"nodeType":"458","messageId":"459","endLine":14,"endColumn":22},{"ruleId":"456","severity":1,"message":"485","line":81,"column":8,"nodeType":"458","messageId":"459","endLine":81,"endColumn":13},{"ruleId":"456","severity":1,"message":"486","line":82,"column":6,"nodeType":"458","messageId":"459","endLine":82,"endColumn":18},{"ruleId":"456","severity":1,"message":"487","line":85,"column":6,"nodeType":"458","messageId":"459","endLine":85,"endColumn":15},{"ruleId":"456","severity":1,"message":"488","line":155,"column":15,"nodeType":"458","messageId":"459","endLine":155,"endColumn":33},{"ruleId":"456","severity":1,"message":"511","line":65,"column":7,"nodeType":"458","messageId":"459","endLine":65,"endColumn":17},{"ruleId":"456","severity":1,"message":"512","line":85,"column":7,"nodeType":"458","messageId":"459","endLine":85,"endColumn":19},{"ruleId":"513","severity":1,"message":"514","line":104,"column":5,"nodeType":"475","messageId":"515","endLine":106,"endColumn":6},{"ruleId":"456","severity":1,"message":"516","line":131,"column":31,"nodeType":"458","messageId":"459","endLine":131,"endColumn":38},{"ruleId":"513","severity":1,"message":"514","line":292,"column":5,"nodeType":"475","messageId":"515","endLine":294,"endColumn":6},{"ruleId":"456","severity":1,"message":"529","line":3,"column":10,"nodeType":"458","messageId":"459","endLine":3,"endColumn":24},{"ruleId":"456","severity":1,"message":"507","line":3,"column":45,"nodeType":"458","messageId":"459","endLine":3,"endColumn":49},{"ruleId":"456","severity":1,"message":"508","line":4,"column":10,"nodeType":"458","messageId":"459","endLine":4,"endColumn":20},{"ruleId":"450","replacedBy":"572"},{"ruleId":"452","replacedBy":"573"},{"ruleId":"456","severity":1,"message":"489","line":2,"column":10,"nodeType":"458","messageId":"459","endLine":2,"endColumn":16},{"ruleId":"456","severity":1,"message":"461","line":8,"column":10,"nodeType":"458","messageId":"459","endLine":8,"endColumn":20},{"ruleId":"456","severity":1,"message":"490","line":8,"column":22,"nodeType":"458","messageId":"459","endLine":8,"endColumn":29},{"ruleId":"456","severity":1,"message":"491","line":9,"column":8,"nodeType":"458","messageId":"459","endLine":9,"endColumn":16},{"ruleId":"456","severity":1,"message":"492","line":10,"column":8,"nodeType":"458","messageId":"459","endLine":10,"endColumn":22},{"ruleId":"456","severity":1,"message":"493","line":11,"column":8,"nodeType":"458","messageId":"459","endLine":11,"endColumn":16},{"ruleId":"456","severity":1,"message":"494","line":12,"column":8,"nodeType":"458","messageId":"459","endLine":12,"endColumn":19},{"ruleId":"456","severity":1,"message":"495","line":13,"column":8,"nodeType":"458","messageId":"459","endLine":13,"endColumn":24},{"ruleId":"456","severity":1,"message":"542","line":19,"column":10,"nodeType":"458","messageId":"459","endLine":19,"endColumn":21},{"ruleId":"456","severity":1,"message":"543","line":19,"column":23,"nodeType":"458","messageId":"459","endLine":19,"endColumn":34},{"ruleId":"456","severity":1,"message":"457","line":19,"column":45,"nodeType":"458","messageId":"459","endLine":19,"endColumn":62},{"ruleId":"456","severity":1,"message":"497","line":171,"column":31,"nodeType":"458","messageId":"459","endLine":171,"endColumn":37},{"ruleId":"456","severity":1,"message":"549","line":187,"column":7,"nodeType":"458","messageId":"459","endLine":187,"endColumn":17},{"ruleId":"465","severity":1,"message":"466","line":169,"column":42,"nodeType":"467","messageId":"468","endLine":169,"endColumn":44},"no-native-reassign",["574"],"no-negated-in-lhs",["575"],["574"],["575"],"no-unused-vars","'mapDispatchToProp' is defined but never used.","Identifier","unusedVar","'activate' is defined but never used.","'IconButton' is defined but never used.","'ExpandMoreIcon' is defined but never used.","'incrementAmount' is assigned a value but never used.","'setIncrementAmount' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","'lacuna' is assigned a value but never used.","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXAttribute","no-dupe-class-members","Duplicate name 'renderChr'.","MethodDefinition","unexpected","'logo' is defined but never used.","'Editor' is defined but never used.",["574"],["575"],["574"],["575"],"'decoder' is assigned a value but never used.","'chunk2TableData' is assigned a value but never used.","'input' is assigned a value but never used.","'beginsAtLine' is assigned a value but never used.","'delimiter' is assigned a value but never used.","'webkitRelativePath' is assigned a value but never used.","'render' is defined but never used.","'Tooltip' is defined but never used.","'StarIcon' is defined but never used.","'StarBorderIcon' is defined but never used.","'DoneIcon' is defined but never used.","'WarningIcon' is defined but never used.","'ErrorOutlineIcon' is defined but never used.","'edit' is assigned a value but never used.","'string' is assigned a value but never used.","'value' is assigned a value but never used.","'lastModifiedDate' is assigned a value but never used.","'modified' is assigned a value but never used.","'annotations' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'C' is defined but never used.","'surfaces' is assigned a value but never used.","'Zoom' is defined but never used.","'makeStyles' is defined but never used.",["574"],["575"],"'listErrors' is assigned a value but never used.","'listWarnings' is assigned a value but never used.","no-useless-constructor","Useless constructor.","noUselessConstructor","'dataKey' is assigned a value but never used.","'R' is defined but never used.","'Fade' is defined but never used.","'modify' is defined but never used.","'add' is defined but never used.","'remove' is defined but never used.","'undo' is defined but never used.","'redo' is defined but never used.","'dataActiveKeys' is assigned a value but never used.","'dataLoaderTimeouts' is assigned a value but never used.","'activeTextRow' is assigned a value but never used.","'ATFMap' is assigned a value but never used.","'download' is assigned a value but never used.","'logReducerData' is defined but never used.","no-sequences","Unexpected use of comma operator.","SequenceExpression","unexpectedCommaExpression",["574"],["575"],["574"],["575"],"'zoom' is assigned a value but never used.",["574"],["575"],"'ReactDOM' is defined but never used.","'useSelector' is defined but never used.","'useDispatch' is defined but never used.",["574"],["575"],"'ChrEditPanel' is defined but never used.","'actions' is assigned a value but never used.","'dispatch' is assigned a value but never used.","'infoButton' is assigned a value but never used.","'Select' is defined but never used.","'FormControl' is defined but never used.","'InputLabel' is defined but never used.","'InlineIcon' is defined but never used.","'alphaLBoxOutline' is defined but never used.","'abjadHebrew' is defined but never used.","'bookshelfIcon' is defined but never used.","'langData' is assigned a value but never used.","'periodData' is assigned a value but never used.","'genreData' is assigned a value but never used.","'current' is assigned a value but never used.","'useEffect' is defined but never used.",["574"],["575"],["574"],["575"],"'id' is assigned a value but never used.",["574"],["575"],["574"],["575"],"'cursor' is assigned a value but never used.",["574"],["575"],"no-global-assign","no-unsafe-negation"]